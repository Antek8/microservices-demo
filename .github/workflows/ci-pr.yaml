# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Continuous Integration - Pull Request"
on:
  pull_request:
    # run on pull requests targeting master
    branches:
      - master
jobs:
  code-tests:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    - name: License Check
      run: |
        set -x
        git init
        git add --all
        git -c user.name="CI Bot" -c user.email="<>" commit -m "initial state"
        addlicense ./
        if [[ -n $(git status -s) ]]; then
          exit 1
        fi
    - name: Go Unit Tests 
      timeout-minutes: 10
      run: |
        for SERVICE in "shippingservice" "productcatalogservice"; do
          echo "testing $SERVICE..."
          pushd src/$SERVICE
          go test
          popd
        done
    - name: C# Unit Tests 
      timeout-minutes: 10
      run: |
        dotnet test src/cartservice/tests/cartservice.tests.csproj
  deployment-tests:
    runs-on: self-hosted
    needs: code-tests
    strategy:
      matrix:
        profile: ["local-code"]
      fail-fast: true
    steps:
    - uses: actions/checkout@v2
    - name: Build + Deploy PR images to GKE
      timeout-minutes: 20
      run: |
        PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        NAMESPACE="pr${PR_NUMBER}"
        echo "::set-env name=NAMESPACE::$NAMESPACE"
        echo "::set-env name=PR_NUMBER::$PR_NUMBER"

        gcloud container clusters get-credentials $PR_CLUSTER --zone $ZONE --project $PROJECT_ID
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Namespace
        metadata:
          name: $NAMESPACE
        EOF
        echo Deploying application
        skaffold config set --global local-cluster false
        skaffold run --default-repo=gcr.io/$PROJECT_ID/$GITHUB_REF --tag=$GITHUB_SHA --namespace=$NAMESPACE
      env:
        PROJECT_ID: ${{ secrets.PROJECT_ID }}
        PR_CLUSTER: ${{ secrets.PR_CLUSTER }}
        ZONE: ${{ secrets.PR_CLUSTER_ZONE }}
    - name: Wait For Pods
      timeout-minutes: 20
      run: |
        set -x
        kubectl config set-context --current --namespace=$NAMESPACE
        kubectl wait --for=condition=available --timeout=500s deployment/adservice
        kubectl wait --for=condition=available --timeout=500s deployment/cartservice
        kubectl wait --for=condition=available --timeout=500s deployment/checkoutservice
        kubectl wait --for=condition=available --timeout=500s deployment/currencyservice
        kubectl wait --for=condition=available --timeout=500s deployment/emailservice
        kubectl wait --for=condition=available --timeout=500s deployment/frontend
        kubectl wait --for=condition=available --timeout=500s deployment/loadgenerator
        kubectl wait --for=condition=available --timeout=500s deployment/paymentservice
        kubectl wait --for=condition=available --timeout=500s deployment/productcatalogservice
        kubectl wait --for=condition=available --timeout=500s deployment/recommendationservice
        kubectl wait --for=condition=available --timeout=500s deployment/shippingservice
    - name: Query EXTERNAL_IP for staging
      timeout-minutes: 5
      run: |
        set -x
        PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
        NAMESPACE="pr${PR_NUMBER}"
        get_externalIP() {
          kubectl get service frontend-external --namespace $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
        }
        until [[ -n "$(get_externalIP)" ]]; do
          echo "Querying for external IP for frontend-external on namespace: $NAMESPACE{}"
        sleep 3
        done
        EXTERNAL_IP=$(get_externalIP)
        echo "::set-env name=EXTERNAL_IP::$EXTERNAL_IP"
    - name: Comment EXTERNAL_IP
      timeout-minutes: 5
      env:
          COMMENTS_URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          curl \
            -X POST \
            $COMMENTS_URL \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            --data '{ "body": "ðŸš² PR staged at '"http://${EXTERNAL_IP}"'"}'
          sleep 60
