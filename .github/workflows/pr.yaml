# Copyright 2022 Raqu LTD
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: "Continuous Integration - Main/Release"
on: pull_request
jobs:
#  code-tests:
#    runs-on: [ubuntu-latest]
#    strategy:
#      matrix:
#        service: [ "productcatalogservice", "shippingservice" ]
#      fail-fast: true
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-go@v3
#        with:
#          go-version: '1.17.5'
#      - name: Go Unit Tests
#        timeout-minutes: 10
#        run: |
#            echo "testing ${{ matrix.service }}..."
#            cd src/${{ matrix.service }}
#            #go test
#  build-images:
#    runs-on: [ubuntu-latest]
#    needs: code-tests
#    strategy:
#      matrix:
#        service: ["adservice"]
#        #service: ["adservice", "cartservice", "checkoutservice", "currencyservice", "emailservice", "frontend", "paymentservice", "productcatalogservice", "recommendationservice", "shippingservice"]
#      fail-fast: true
#    steps:
#      -
#        name: Checkout
#        uses: actions/checkout@v3
#
#      -
#        name: Set up QEMU
#        uses: docker/setup-qemu-action@v2
#
#      -
#        name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      -
#        name: Login to DockerHub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      -
#        name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          # list of Docker images to use as base name for tags
#          images: |
#            raquio/${{ matrix.service }}
#          # generate Docker tags based on the following events/attributes
#          tags: |
#            type=ref,event=pr
#      -
#        uses: docker/build-push-action@v3
#        name: Build
#        timeout-minutes: 20
#        with:
#          push: true
#          context: src/${{ matrix.service }}
#          file: src/${{ matrix.service }}/Dockerfile
#          tags: ${{ steps.meta.outputs.tags }}
  deploy:
    runs-on: [ubuntu-latest]
    container:
      image: raquio/deployer:v0.0.9
      options: --user root
    #needs: build-images
    strategy:
      matrix:
        service: ["adservice"]
        #service: ["adservice", "cartservice", "checkoutservice", "currencyservice", "emailservice", "frontend", "paymentservice", "productcatalogservice", "recommendationservice", "shippingservice"]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.PACK_REGISTRY_DEPLOY_KEY }}
      -
        name: deploy
        timeout-minutes: 10
        run: |
            deployer --conf src/${{ matrix.service }}/deploy/prod.hcl 

  #      - name: Wait For Allocations
  #        timeout-minutes: 20
  #        run: |
  #          set -x
  #          kubectl config set-context --current --namespace=$NAMESPACE
  #          kubectl wait --for=condition=available --timeout=1000s deployment/redis-cart
  #          kubectl wait --for=condition=available --timeout=1000s deployment/adservice
  #          kubectl wait --for=condition=available --timeout=1000s deployment/cartservice
  #          kubectl wait --for=condition=available --timeout=1000s deployment/checkoutservice
  #          kubectl wait --for=condition=available --timeout=1000s deployment/currencyservice
  #          kubectl wait --for=condition=available --timeout=1000s deployment/emailservice
  #          kubectl wait --for=condition=available --timeout=1000s deployment/frontend
  #          kubectl wait --for=condition=available --timeout=1000s deployment/loadgenerator
  #          kubectl wait --for=condition=available --timeout=1000s deployment/paymentservice
  #          kubectl wait --for=condition=available --timeout=1000s deployment/productcatalogservice
  #          kubectl wait --for=condition=available --timeout=1000s deployment/recommendationservice
  #          kubectl wait --for=condition=available --timeout=1000s deployment/shippingservice
  #      - name: Smoke Test
  #        timeout-minutes: 5
  #        run: |
  #          set -x
  #          # start fresh loadgenerator pod
  #          kubectl delete pod -l app=loadgenerator
  #          # wait for requests to come in
  #          REQUEST_COUNT="0"
  #          while [[ "$REQUEST_COUNT"  -lt "50"  ]]; do
  #              sleep 5
  #              REQUEST_COUNT=$(kubectl logs -l app=loadgenerator | grep Aggregated | awk '{print $2}')
  #          done
  #          # ensure there are no errors hitting endpoints
  #          ERROR_COUNT=$(kubectl logs -l app=loadgenerator | grep Aggregated | awk '{print $3}' | sed "s/[(][^)]*[)]//g")
  #          if [[ "$ERROR_COUNT" -gt "0" ]]; then
  #            exit 1
  #          fi
