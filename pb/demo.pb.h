// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_demo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_demo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_demo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_demo_2eproto;
namespace hipstershop {
class Ad;
class AdDefaultTypeInternal;
extern AdDefaultTypeInternal _Ad_default_instance_;
class AdRequest;
class AdRequestDefaultTypeInternal;
extern AdRequestDefaultTypeInternal _AdRequest_default_instance_;
class AdResponse;
class AdResponseDefaultTypeInternal;
extern AdResponseDefaultTypeInternal _AdResponse_default_instance_;
class AddItemRequest;
class AddItemRequestDefaultTypeInternal;
extern AddItemRequestDefaultTypeInternal _AddItemRequest_default_instance_;
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Cart;
class CartDefaultTypeInternal;
extern CartDefaultTypeInternal _Cart_default_instance_;
class CartItem;
class CartItemDefaultTypeInternal;
extern CartItemDefaultTypeInternal _CartItem_default_instance_;
class ChargeRequest;
class ChargeRequestDefaultTypeInternal;
extern ChargeRequestDefaultTypeInternal _ChargeRequest_default_instance_;
class ChargeResponse;
class ChargeResponseDefaultTypeInternal;
extern ChargeResponseDefaultTypeInternal _ChargeResponse_default_instance_;
class CreditCardInfo;
class CreditCardInfoDefaultTypeInternal;
extern CreditCardInfoDefaultTypeInternal _CreditCardInfo_default_instance_;
class CurrencyConversionRequest;
class CurrencyConversionRequestDefaultTypeInternal;
extern CurrencyConversionRequestDefaultTypeInternal _CurrencyConversionRequest_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class EmptyCartRequest;
class EmptyCartRequestDefaultTypeInternal;
extern EmptyCartRequestDefaultTypeInternal _EmptyCartRequest_default_instance_;
class GetCartRequest;
class GetCartRequestDefaultTypeInternal;
extern GetCartRequestDefaultTypeInternal _GetCartRequest_default_instance_;
class GetProductRequest;
class GetProductRequestDefaultTypeInternal;
extern GetProductRequestDefaultTypeInternal _GetProductRequest_default_instance_;
class GetQuoteRequest;
class GetQuoteRequestDefaultTypeInternal;
extern GetQuoteRequestDefaultTypeInternal _GetQuoteRequest_default_instance_;
class GetQuoteResponse;
class GetQuoteResponseDefaultTypeInternal;
extern GetQuoteResponseDefaultTypeInternal _GetQuoteResponse_default_instance_;
class GetSupportedCurrenciesResponse;
class GetSupportedCurrenciesResponseDefaultTypeInternal;
extern GetSupportedCurrenciesResponseDefaultTypeInternal _GetSupportedCurrenciesResponse_default_instance_;
class ListProductsResponse;
class ListProductsResponseDefaultTypeInternal;
extern ListProductsResponseDefaultTypeInternal _ListProductsResponse_default_instance_;
class ListRecommendationsRequest;
class ListRecommendationsRequestDefaultTypeInternal;
extern ListRecommendationsRequestDefaultTypeInternal _ListRecommendationsRequest_default_instance_;
class ListRecommendationsResponse;
class ListRecommendationsResponseDefaultTypeInternal;
extern ListRecommendationsResponseDefaultTypeInternal _ListRecommendationsResponse_default_instance_;
class Money;
class MoneyDefaultTypeInternal;
extern MoneyDefaultTypeInternal _Money_default_instance_;
class OrderItem;
class OrderItemDefaultTypeInternal;
extern OrderItemDefaultTypeInternal _OrderItem_default_instance_;
class OrderResult;
class OrderResultDefaultTypeInternal;
extern OrderResultDefaultTypeInternal _OrderResult_default_instance_;
class PlaceOrderRequest;
class PlaceOrderRequestDefaultTypeInternal;
extern PlaceOrderRequestDefaultTypeInternal _PlaceOrderRequest_default_instance_;
class PlaceOrderResponse;
class PlaceOrderResponseDefaultTypeInternal;
extern PlaceOrderResponseDefaultTypeInternal _PlaceOrderResponse_default_instance_;
class Product;
class ProductDefaultTypeInternal;
extern ProductDefaultTypeInternal _Product_default_instance_;
class SearchProductsRequest;
class SearchProductsRequestDefaultTypeInternal;
extern SearchProductsRequestDefaultTypeInternal _SearchProductsRequest_default_instance_;
class SearchProductsResponse;
class SearchProductsResponseDefaultTypeInternal;
extern SearchProductsResponseDefaultTypeInternal _SearchProductsResponse_default_instance_;
class SendOrderConfirmationRequest;
class SendOrderConfirmationRequestDefaultTypeInternal;
extern SendOrderConfirmationRequestDefaultTypeInternal _SendOrderConfirmationRequest_default_instance_;
class ShipOrderRequest;
class ShipOrderRequestDefaultTypeInternal;
extern ShipOrderRequestDefaultTypeInternal _ShipOrderRequest_default_instance_;
class ShipOrderResponse;
class ShipOrderResponseDefaultTypeInternal;
extern ShipOrderResponseDefaultTypeInternal _ShipOrderResponse_default_instance_;
}  // namespace hipstershop
PROTOBUF_NAMESPACE_OPEN
template<> ::hipstershop::Ad* Arena::CreateMaybeMessage<::hipstershop::Ad>(Arena*);
template<> ::hipstershop::AdRequest* Arena::CreateMaybeMessage<::hipstershop::AdRequest>(Arena*);
template<> ::hipstershop::AdResponse* Arena::CreateMaybeMessage<::hipstershop::AdResponse>(Arena*);
template<> ::hipstershop::AddItemRequest* Arena::CreateMaybeMessage<::hipstershop::AddItemRequest>(Arena*);
template<> ::hipstershop::Address* Arena::CreateMaybeMessage<::hipstershop::Address>(Arena*);
template<> ::hipstershop::Cart* Arena::CreateMaybeMessage<::hipstershop::Cart>(Arena*);
template<> ::hipstershop::CartItem* Arena::CreateMaybeMessage<::hipstershop::CartItem>(Arena*);
template<> ::hipstershop::ChargeRequest* Arena::CreateMaybeMessage<::hipstershop::ChargeRequest>(Arena*);
template<> ::hipstershop::ChargeResponse* Arena::CreateMaybeMessage<::hipstershop::ChargeResponse>(Arena*);
template<> ::hipstershop::CreditCardInfo* Arena::CreateMaybeMessage<::hipstershop::CreditCardInfo>(Arena*);
template<> ::hipstershop::CurrencyConversionRequest* Arena::CreateMaybeMessage<::hipstershop::CurrencyConversionRequest>(Arena*);
template<> ::hipstershop::Empty* Arena::CreateMaybeMessage<::hipstershop::Empty>(Arena*);
template<> ::hipstershop::EmptyCartRequest* Arena::CreateMaybeMessage<::hipstershop::EmptyCartRequest>(Arena*);
template<> ::hipstershop::GetCartRequest* Arena::CreateMaybeMessage<::hipstershop::GetCartRequest>(Arena*);
template<> ::hipstershop::GetProductRequest* Arena::CreateMaybeMessage<::hipstershop::GetProductRequest>(Arena*);
template<> ::hipstershop::GetQuoteRequest* Arena::CreateMaybeMessage<::hipstershop::GetQuoteRequest>(Arena*);
template<> ::hipstershop::GetQuoteResponse* Arena::CreateMaybeMessage<::hipstershop::GetQuoteResponse>(Arena*);
template<> ::hipstershop::GetSupportedCurrenciesResponse* Arena::CreateMaybeMessage<::hipstershop::GetSupportedCurrenciesResponse>(Arena*);
template<> ::hipstershop::ListProductsResponse* Arena::CreateMaybeMessage<::hipstershop::ListProductsResponse>(Arena*);
template<> ::hipstershop::ListRecommendationsRequest* Arena::CreateMaybeMessage<::hipstershop::ListRecommendationsRequest>(Arena*);
template<> ::hipstershop::ListRecommendationsResponse* Arena::CreateMaybeMessage<::hipstershop::ListRecommendationsResponse>(Arena*);
template<> ::hipstershop::Money* Arena::CreateMaybeMessage<::hipstershop::Money>(Arena*);
template<> ::hipstershop::OrderItem* Arena::CreateMaybeMessage<::hipstershop::OrderItem>(Arena*);
template<> ::hipstershop::OrderResult* Arena::CreateMaybeMessage<::hipstershop::OrderResult>(Arena*);
template<> ::hipstershop::PlaceOrderRequest* Arena::CreateMaybeMessage<::hipstershop::PlaceOrderRequest>(Arena*);
template<> ::hipstershop::PlaceOrderResponse* Arena::CreateMaybeMessage<::hipstershop::PlaceOrderResponse>(Arena*);
template<> ::hipstershop::Product* Arena::CreateMaybeMessage<::hipstershop::Product>(Arena*);
template<> ::hipstershop::SearchProductsRequest* Arena::CreateMaybeMessage<::hipstershop::SearchProductsRequest>(Arena*);
template<> ::hipstershop::SearchProductsResponse* Arena::CreateMaybeMessage<::hipstershop::SearchProductsResponse>(Arena*);
template<> ::hipstershop::SendOrderConfirmationRequest* Arena::CreateMaybeMessage<::hipstershop::SendOrderConfirmationRequest>(Arena*);
template<> ::hipstershop::ShipOrderRequest* Arena::CreateMaybeMessage<::hipstershop::ShipOrderRequest>(Arena*);
template<> ::hipstershop::ShipOrderResponse* Arena::CreateMaybeMessage<::hipstershop::ShipOrderResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hipstershop {

// ===================================================================

class CartItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.CartItem) */ {
 public:
  inline CartItem() : CartItem(nullptr) {}
  virtual ~CartItem();

  CartItem(const CartItem& from);
  CartItem(CartItem&& from) noexcept
    : CartItem() {
    *this = ::std::move(from);
  }

  inline CartItem& operator=(const CartItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartItem& operator=(CartItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CartItem& default_instance();

  static inline const CartItem* internal_default_instance() {
    return reinterpret_cast<const CartItem*>(
               &_CartItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CartItem& a, CartItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CartItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CartItem* New() const final {
    return CreateMaybeMessage<CartItem>(nullptr);
  }

  CartItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CartItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CartItem& from);
  void MergeFrom(const CartItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.CartItem";
  }
  protected:
  explicit CartItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // string product_id = 1;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // int32 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.CartItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 quantity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class AddItemRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.AddItemRequest) */ {
 public:
  inline AddItemRequest() : AddItemRequest(nullptr) {}
  virtual ~AddItemRequest();

  AddItemRequest(const AddItemRequest& from);
  AddItemRequest(AddItemRequest&& from) noexcept
    : AddItemRequest() {
    *this = ::std::move(from);
  }

  inline AddItemRequest& operator=(const AddItemRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddItemRequest& operator=(AddItemRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddItemRequest& default_instance();

  static inline const AddItemRequest* internal_default_instance() {
    return reinterpret_cast<const AddItemRequest*>(
               &_AddItemRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddItemRequest& a, AddItemRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddItemRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddItemRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddItemRequest* New() const final {
    return CreateMaybeMessage<AddItemRequest>(nullptr);
  }

  AddItemRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddItemRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddItemRequest& from);
  void MergeFrom(const AddItemRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddItemRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.AddItemRequest";
  }
  protected:
  explicit AddItemRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kItemFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .hipstershop.CartItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::hipstershop::CartItem& item() const;
  ::hipstershop::CartItem* release_item();
  ::hipstershop::CartItem* mutable_item();
  void set_allocated_item(::hipstershop::CartItem* item);
  private:
  const ::hipstershop::CartItem& _internal_item() const;
  ::hipstershop::CartItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::hipstershop::CartItem* item);
  ::hipstershop::CartItem* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:hipstershop.AddItemRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::hipstershop::CartItem* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class EmptyCartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.EmptyCartRequest) */ {
 public:
  inline EmptyCartRequest() : EmptyCartRequest(nullptr) {}
  virtual ~EmptyCartRequest();

  EmptyCartRequest(const EmptyCartRequest& from);
  EmptyCartRequest(EmptyCartRequest&& from) noexcept
    : EmptyCartRequest() {
    *this = ::std::move(from);
  }

  inline EmptyCartRequest& operator=(const EmptyCartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyCartRequest& operator=(EmptyCartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyCartRequest& default_instance();

  static inline const EmptyCartRequest* internal_default_instance() {
    return reinterpret_cast<const EmptyCartRequest*>(
               &_EmptyCartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmptyCartRequest& a, EmptyCartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyCartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyCartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyCartRequest* New() const final {
    return CreateMaybeMessage<EmptyCartRequest>(nullptr);
  }

  EmptyCartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyCartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyCartRequest& from);
  void MergeFrom(const EmptyCartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyCartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.EmptyCartRequest";
  }
  protected:
  explicit EmptyCartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.EmptyCartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class GetCartRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.GetCartRequest) */ {
 public:
  inline GetCartRequest() : GetCartRequest(nullptr) {}
  virtual ~GetCartRequest();

  GetCartRequest(const GetCartRequest& from);
  GetCartRequest(GetCartRequest&& from) noexcept
    : GetCartRequest() {
    *this = ::std::move(from);
  }

  inline GetCartRequest& operator=(const GetCartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCartRequest& operator=(GetCartRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCartRequest& default_instance();

  static inline const GetCartRequest* internal_default_instance() {
    return reinterpret_cast<const GetCartRequest*>(
               &_GetCartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetCartRequest& a, GetCartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCartRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCartRequest* New() const final {
    return CreateMaybeMessage<GetCartRequest>(nullptr);
  }

  GetCartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCartRequest& from);
  void MergeFrom(const GetCartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.GetCartRequest";
  }
  protected:
  explicit GetCartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.GetCartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Cart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.Cart) */ {
 public:
  inline Cart() : Cart(nullptr) {}
  virtual ~Cart();

  Cart(const Cart& from);
  Cart(Cart&& from) noexcept
    : Cart() {
    *this = ::std::move(from);
  }

  inline Cart& operator=(const Cart& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cart& operator=(Cart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Cart& default_instance();

  static inline const Cart* internal_default_instance() {
    return reinterpret_cast<const Cart*>(
               &_Cart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Cart& a, Cart& b) {
    a.Swap(&b);
  }
  inline void Swap(Cart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Cart* New() const final {
    return CreateMaybeMessage<Cart>(nullptr);
  }

  Cart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Cart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Cart& from);
  void MergeFrom(const Cart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.Cart";
  }
  protected:
  explicit Cart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // repeated .hipstershop.CartItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::hipstershop::CartItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >*
      mutable_items();
  private:
  const ::hipstershop::CartItem& _internal_items(int index) const;
  ::hipstershop::CartItem* _internal_add_items();
  public:
  const ::hipstershop::CartItem& items(int index) const;
  ::hipstershop::CartItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >&
      items() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.Cart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:hipstershop.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class ListRecommendationsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.ListRecommendationsRequest) */ {
 public:
  inline ListRecommendationsRequest() : ListRecommendationsRequest(nullptr) {}
  virtual ~ListRecommendationsRequest();

  ListRecommendationsRequest(const ListRecommendationsRequest& from);
  ListRecommendationsRequest(ListRecommendationsRequest&& from) noexcept
    : ListRecommendationsRequest() {
    *this = ::std::move(from);
  }

  inline ListRecommendationsRequest& operator=(const ListRecommendationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRecommendationsRequest& operator=(ListRecommendationsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRecommendationsRequest& default_instance();

  static inline const ListRecommendationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListRecommendationsRequest*>(
               &_ListRecommendationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListRecommendationsRequest& a, ListRecommendationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRecommendationsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRecommendationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRecommendationsRequest* New() const final {
    return CreateMaybeMessage<ListRecommendationsRequest>(nullptr);
  }

  ListRecommendationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRecommendationsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRecommendationsRequest& from);
  void MergeFrom(const ListRecommendationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRecommendationsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.ListRecommendationsRequest";
  }
  protected:
  explicit ListRecommendationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdsFieldNumber = 2,
    kUserIdFieldNumber = 1,
  };
  // repeated string product_ids = 2;
  int product_ids_size() const;
  private:
  int _internal_product_ids_size() const;
  public:
  void clear_product_ids();
  const std::string& product_ids(int index) const;
  std::string* mutable_product_ids(int index);
  void set_product_ids(int index, const std::string& value);
  void set_product_ids(int index, std::string&& value);
  void set_product_ids(int index, const char* value);
  void set_product_ids(int index, const char* value, size_t size);
  std::string* add_product_ids();
  void add_product_ids(const std::string& value);
  void add_product_ids(std::string&& value);
  void add_product_ids(const char* value);
  void add_product_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& product_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_product_ids();
  private:
  const std::string& _internal_product_ids(int index) const;
  std::string* _internal_add_product_ids();
  public:

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.ListRecommendationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> product_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class ListRecommendationsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.ListRecommendationsResponse) */ {
 public:
  inline ListRecommendationsResponse() : ListRecommendationsResponse(nullptr) {}
  virtual ~ListRecommendationsResponse();

  ListRecommendationsResponse(const ListRecommendationsResponse& from);
  ListRecommendationsResponse(ListRecommendationsResponse&& from) noexcept
    : ListRecommendationsResponse() {
    *this = ::std::move(from);
  }

  inline ListRecommendationsResponse& operator=(const ListRecommendationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRecommendationsResponse& operator=(ListRecommendationsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListRecommendationsResponse& default_instance();

  static inline const ListRecommendationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListRecommendationsResponse*>(
               &_ListRecommendationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListRecommendationsResponse& a, ListRecommendationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRecommendationsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRecommendationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRecommendationsResponse* New() const final {
    return CreateMaybeMessage<ListRecommendationsResponse>(nullptr);
  }

  ListRecommendationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRecommendationsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListRecommendationsResponse& from);
  void MergeFrom(const ListRecommendationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRecommendationsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.ListRecommendationsResponse";
  }
  protected:
  explicit ListRecommendationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdsFieldNumber = 1,
  };
  // repeated string product_ids = 1;
  int product_ids_size() const;
  private:
  int _internal_product_ids_size() const;
  public:
  void clear_product_ids();
  const std::string& product_ids(int index) const;
  std::string* mutable_product_ids(int index);
  void set_product_ids(int index, const std::string& value);
  void set_product_ids(int index, std::string&& value);
  void set_product_ids(int index, const char* value);
  void set_product_ids(int index, const char* value, size_t size);
  std::string* add_product_ids();
  void add_product_ids(const std::string& value);
  void add_product_ids(std::string&& value);
  void add_product_ids(const char* value);
  void add_product_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& product_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_product_ids();
  private:
  const std::string& _internal_product_ids(int index) const;
  std::string* _internal_add_product_ids();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.ListRecommendationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> product_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Product PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.Product) */ {
 public:
  inline Product() : Product(nullptr) {}
  virtual ~Product();

  Product(const Product& from);
  Product(Product&& from) noexcept
    : Product() {
    *this = ::std::move(from);
  }

  inline Product& operator=(const Product& from) {
    CopyFrom(from);
    return *this;
  }
  inline Product& operator=(Product&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Product& default_instance();

  static inline const Product* internal_default_instance() {
    return reinterpret_cast<const Product*>(
               &_Product_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Product& a, Product& b) {
    a.Swap(&b);
  }
  inline void Swap(Product* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Product* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Product* New() const final {
    return CreateMaybeMessage<Product>(nullptr);
  }

  Product* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Product>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Product& from);
  void MergeFrom(const Product& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Product* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.Product";
  }
  protected:
  explicit Product(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 6,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kPictureFieldNumber = 4,
    kPriceUsdFieldNumber = 5,
  };
  // repeated string categories = 6;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();
  private:
  const std::string& _internal_categories(int index) const;
  std::string* _internal_add_categories();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string picture = 4;
  void clear_picture();
  const std::string& picture() const;
  void set_picture(const std::string& value);
  void set_picture(std::string&& value);
  void set_picture(const char* value);
  void set_picture(const char* value, size_t size);
  std::string* mutable_picture();
  std::string* release_picture();
  void set_allocated_picture(std::string* picture);
  private:
  const std::string& _internal_picture() const;
  void _internal_set_picture(const std::string& value);
  std::string* _internal_mutable_picture();
  public:

  // .hipstershop.Money price_usd = 5;
  bool has_price_usd() const;
  private:
  bool _internal_has_price_usd() const;
  public:
  void clear_price_usd();
  const ::hipstershop::Money& price_usd() const;
  ::hipstershop::Money* release_price_usd();
  ::hipstershop::Money* mutable_price_usd();
  void set_allocated_price_usd(::hipstershop::Money* price_usd);
  private:
  const ::hipstershop::Money& _internal_price_usd() const;
  ::hipstershop::Money* _internal_mutable_price_usd();
  public:
  void unsafe_arena_set_allocated_price_usd(
      ::hipstershop::Money* price_usd);
  ::hipstershop::Money* unsafe_arena_release_price_usd();

  // @@protoc_insertion_point(class_scope:hipstershop.Product)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr picture_;
  ::hipstershop::Money* price_usd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class ListProductsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.ListProductsResponse) */ {
 public:
  inline ListProductsResponse() : ListProductsResponse(nullptr) {}
  virtual ~ListProductsResponse();

  ListProductsResponse(const ListProductsResponse& from);
  ListProductsResponse(ListProductsResponse&& from) noexcept
    : ListProductsResponse() {
    *this = ::std::move(from);
  }

  inline ListProductsResponse& operator=(const ListProductsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProductsResponse& operator=(ListProductsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListProductsResponse& default_instance();

  static inline const ListProductsResponse* internal_default_instance() {
    return reinterpret_cast<const ListProductsResponse*>(
               &_ListProductsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListProductsResponse& a, ListProductsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProductsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProductsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProductsResponse* New() const final {
    return CreateMaybeMessage<ListProductsResponse>(nullptr);
  }

  ListProductsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProductsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListProductsResponse& from);
  void MergeFrom(const ListProductsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProductsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.ListProductsResponse";
  }
  protected:
  explicit ListProductsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 1,
  };
  // repeated .hipstershop.Product products = 1;
  int products_size() const;
  private:
  int _internal_products_size() const;
  public:
  void clear_products();
  ::hipstershop::Product* mutable_products(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product >*
      mutable_products();
  private:
  const ::hipstershop::Product& _internal_products(int index) const;
  ::hipstershop::Product* _internal_add_products();
  public:
  const ::hipstershop::Product& products(int index) const;
  ::hipstershop::Product* add_products();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product >&
      products() const;

  // @@protoc_insertion_point(class_scope:hipstershop.ListProductsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product > products_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class GetProductRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.GetProductRequest) */ {
 public:
  inline GetProductRequest() : GetProductRequest(nullptr) {}
  virtual ~GetProductRequest();

  GetProductRequest(const GetProductRequest& from);
  GetProductRequest(GetProductRequest&& from) noexcept
    : GetProductRequest() {
    *this = ::std::move(from);
  }

  inline GetProductRequest& operator=(const GetProductRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProductRequest& operator=(GetProductRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetProductRequest& default_instance();

  static inline const GetProductRequest* internal_default_instance() {
    return reinterpret_cast<const GetProductRequest*>(
               &_GetProductRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetProductRequest& a, GetProductRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProductRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProductRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetProductRequest* New() const final {
    return CreateMaybeMessage<GetProductRequest>(nullptr);
  }

  GetProductRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetProductRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetProductRequest& from);
  void MergeFrom(const GetProductRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProductRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.GetProductRequest";
  }
  protected:
  explicit GetProductRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.GetProductRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class SearchProductsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.SearchProductsRequest) */ {
 public:
  inline SearchProductsRequest() : SearchProductsRequest(nullptr) {}
  virtual ~SearchProductsRequest();

  SearchProductsRequest(const SearchProductsRequest& from);
  SearchProductsRequest(SearchProductsRequest&& from) noexcept
    : SearchProductsRequest() {
    *this = ::std::move(from);
  }

  inline SearchProductsRequest& operator=(const SearchProductsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchProductsRequest& operator=(SearchProductsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchProductsRequest& default_instance();

  static inline const SearchProductsRequest* internal_default_instance() {
    return reinterpret_cast<const SearchProductsRequest*>(
               &_SearchProductsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SearchProductsRequest& a, SearchProductsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchProductsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchProductsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchProductsRequest* New() const final {
    return CreateMaybeMessage<SearchProductsRequest>(nullptr);
  }

  SearchProductsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchProductsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchProductsRequest& from);
  void MergeFrom(const SearchProductsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchProductsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.SearchProductsRequest";
  }
  protected:
  explicit SearchProductsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.SearchProductsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class SearchProductsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.SearchProductsResponse) */ {
 public:
  inline SearchProductsResponse() : SearchProductsResponse(nullptr) {}
  virtual ~SearchProductsResponse();

  SearchProductsResponse(const SearchProductsResponse& from);
  SearchProductsResponse(SearchProductsResponse&& from) noexcept
    : SearchProductsResponse() {
    *this = ::std::move(from);
  }

  inline SearchProductsResponse& operator=(const SearchProductsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchProductsResponse& operator=(SearchProductsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchProductsResponse& default_instance();

  static inline const SearchProductsResponse* internal_default_instance() {
    return reinterpret_cast<const SearchProductsResponse*>(
               &_SearchProductsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SearchProductsResponse& a, SearchProductsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchProductsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchProductsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchProductsResponse* New() const final {
    return CreateMaybeMessage<SearchProductsResponse>(nullptr);
  }

  SearchProductsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchProductsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchProductsResponse& from);
  void MergeFrom(const SearchProductsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchProductsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.SearchProductsResponse";
  }
  protected:
  explicit SearchProductsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .hipstershop.Product results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::hipstershop::Product* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product >*
      mutable_results();
  private:
  const ::hipstershop::Product& _internal_results(int index) const;
  ::hipstershop::Product* _internal_add_results();
  public:
  const ::hipstershop::Product& results(int index) const;
  ::hipstershop::Product* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product >&
      results() const;

  // @@protoc_insertion_point(class_scope:hipstershop.SearchProductsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class GetQuoteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.GetQuoteRequest) */ {
 public:
  inline GetQuoteRequest() : GetQuoteRequest(nullptr) {}
  virtual ~GetQuoteRequest();

  GetQuoteRequest(const GetQuoteRequest& from);
  GetQuoteRequest(GetQuoteRequest&& from) noexcept
    : GetQuoteRequest() {
    *this = ::std::move(from);
  }

  inline GetQuoteRequest& operator=(const GetQuoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQuoteRequest& operator=(GetQuoteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetQuoteRequest& default_instance();

  static inline const GetQuoteRequest* internal_default_instance() {
    return reinterpret_cast<const GetQuoteRequest*>(
               &_GetQuoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetQuoteRequest& a, GetQuoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQuoteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetQuoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetQuoteRequest* New() const final {
    return CreateMaybeMessage<GetQuoteRequest>(nullptr);
  }

  GetQuoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetQuoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetQuoteRequest& from);
  void MergeFrom(const GetQuoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQuoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.GetQuoteRequest";
  }
  protected:
  explicit GetQuoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .hipstershop.CartItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::hipstershop::CartItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >*
      mutable_items();
  private:
  const ::hipstershop::CartItem& _internal_items(int index) const;
  ::hipstershop::CartItem* _internal_add_items();
  public:
  const ::hipstershop::CartItem& items(int index) const;
  ::hipstershop::CartItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >&
      items() const;

  // .hipstershop.Address address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::hipstershop::Address& address() const;
  ::hipstershop::Address* release_address();
  ::hipstershop::Address* mutable_address();
  void set_allocated_address(::hipstershop::Address* address);
  private:
  const ::hipstershop::Address& _internal_address() const;
  ::hipstershop::Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::hipstershop::Address* address);
  ::hipstershop::Address* unsafe_arena_release_address();

  // @@protoc_insertion_point(class_scope:hipstershop.GetQuoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem > items_;
  ::hipstershop::Address* address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class GetQuoteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.GetQuoteResponse) */ {
 public:
  inline GetQuoteResponse() : GetQuoteResponse(nullptr) {}
  virtual ~GetQuoteResponse();

  GetQuoteResponse(const GetQuoteResponse& from);
  GetQuoteResponse(GetQuoteResponse&& from) noexcept
    : GetQuoteResponse() {
    *this = ::std::move(from);
  }

  inline GetQuoteResponse& operator=(const GetQuoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetQuoteResponse& operator=(GetQuoteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetQuoteResponse& default_instance();

  static inline const GetQuoteResponse* internal_default_instance() {
    return reinterpret_cast<const GetQuoteResponse*>(
               &_GetQuoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetQuoteResponse& a, GetQuoteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetQuoteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetQuoteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetQuoteResponse* New() const final {
    return CreateMaybeMessage<GetQuoteResponse>(nullptr);
  }

  GetQuoteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetQuoteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetQuoteResponse& from);
  void MergeFrom(const GetQuoteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQuoteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.GetQuoteResponse";
  }
  protected:
  explicit GetQuoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostUsdFieldNumber = 1,
  };
  // .hipstershop.Money cost_usd = 1;
  bool has_cost_usd() const;
  private:
  bool _internal_has_cost_usd() const;
  public:
  void clear_cost_usd();
  const ::hipstershop::Money& cost_usd() const;
  ::hipstershop::Money* release_cost_usd();
  ::hipstershop::Money* mutable_cost_usd();
  void set_allocated_cost_usd(::hipstershop::Money* cost_usd);
  private:
  const ::hipstershop::Money& _internal_cost_usd() const;
  ::hipstershop::Money* _internal_mutable_cost_usd();
  public:
  void unsafe_arena_set_allocated_cost_usd(
      ::hipstershop::Money* cost_usd);
  ::hipstershop::Money* unsafe_arena_release_cost_usd();

  // @@protoc_insertion_point(class_scope:hipstershop.GetQuoteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::hipstershop::Money* cost_usd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class ShipOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.ShipOrderRequest) */ {
 public:
  inline ShipOrderRequest() : ShipOrderRequest(nullptr) {}
  virtual ~ShipOrderRequest();

  ShipOrderRequest(const ShipOrderRequest& from);
  ShipOrderRequest(ShipOrderRequest&& from) noexcept
    : ShipOrderRequest() {
    *this = ::std::move(from);
  }

  inline ShipOrderRequest& operator=(const ShipOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShipOrderRequest& operator=(ShipOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShipOrderRequest& default_instance();

  static inline const ShipOrderRequest* internal_default_instance() {
    return reinterpret_cast<const ShipOrderRequest*>(
               &_ShipOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ShipOrderRequest& a, ShipOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShipOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShipOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShipOrderRequest* New() const final {
    return CreateMaybeMessage<ShipOrderRequest>(nullptr);
  }

  ShipOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShipOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShipOrderRequest& from);
  void MergeFrom(const ShipOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.ShipOrderRequest";
  }
  protected:
  explicit ShipOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // repeated .hipstershop.CartItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::hipstershop::CartItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >*
      mutable_items();
  private:
  const ::hipstershop::CartItem& _internal_items(int index) const;
  ::hipstershop::CartItem* _internal_add_items();
  public:
  const ::hipstershop::CartItem& items(int index) const;
  ::hipstershop::CartItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >&
      items() const;

  // .hipstershop.Address address = 1;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::hipstershop::Address& address() const;
  ::hipstershop::Address* release_address();
  ::hipstershop::Address* mutable_address();
  void set_allocated_address(::hipstershop::Address* address);
  private:
  const ::hipstershop::Address& _internal_address() const;
  ::hipstershop::Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::hipstershop::Address* address);
  ::hipstershop::Address* unsafe_arena_release_address();

  // @@protoc_insertion_point(class_scope:hipstershop.ShipOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem > items_;
  ::hipstershop::Address* address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class ShipOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.ShipOrderResponse) */ {
 public:
  inline ShipOrderResponse() : ShipOrderResponse(nullptr) {}
  virtual ~ShipOrderResponse();

  ShipOrderResponse(const ShipOrderResponse& from);
  ShipOrderResponse(ShipOrderResponse&& from) noexcept
    : ShipOrderResponse() {
    *this = ::std::move(from);
  }

  inline ShipOrderResponse& operator=(const ShipOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShipOrderResponse& operator=(ShipOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShipOrderResponse& default_instance();

  static inline const ShipOrderResponse* internal_default_instance() {
    return reinterpret_cast<const ShipOrderResponse*>(
               &_ShipOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ShipOrderResponse& a, ShipOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShipOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShipOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShipOrderResponse* New() const final {
    return CreateMaybeMessage<ShipOrderResponse>(nullptr);
  }

  ShipOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShipOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShipOrderResponse& from);
  void MergeFrom(const ShipOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.ShipOrderResponse";
  }
  protected:
  explicit ShipOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackingIdFieldNumber = 1,
  };
  // string tracking_id = 1;
  void clear_tracking_id();
  const std::string& tracking_id() const;
  void set_tracking_id(const std::string& value);
  void set_tracking_id(std::string&& value);
  void set_tracking_id(const char* value);
  void set_tracking_id(const char* value, size_t size);
  std::string* mutable_tracking_id();
  std::string* release_tracking_id();
  void set_allocated_tracking_id(std::string* tracking_id);
  private:
  const std::string& _internal_tracking_id() const;
  void _internal_set_tracking_id(const std::string& value);
  std::string* _internal_mutable_tracking_id();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.ShipOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tracking_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.Address) */ {
 public:
  inline Address() : Address(nullptr) {}
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.Address";
  }
  protected:
  explicit Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreetAddressFieldNumber = 1,
    kCityFieldNumber = 2,
    kStateFieldNumber = 3,
    kCountryFieldNumber = 4,
    kZipCodeFieldNumber = 5,
  };
  // string street_address = 1;
  void clear_street_address();
  const std::string& street_address() const;
  void set_street_address(const std::string& value);
  void set_street_address(std::string&& value);
  void set_street_address(const char* value);
  void set_street_address(const char* value, size_t size);
  std::string* mutable_street_address();
  std::string* release_street_address();
  void set_allocated_street_address(std::string* street_address);
  private:
  const std::string& _internal_street_address() const;
  void _internal_set_street_address(const std::string& value);
  std::string* _internal_mutable_street_address();
  public:

  // string city = 2;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string state = 3;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string country = 4;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // int32 zip_code = 5;
  void clear_zip_code();
  ::PROTOBUF_NAMESPACE_ID::int32 zip_code() const;
  void set_zip_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zip_code() const;
  void _internal_set_zip_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::int32 zip_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Money PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.Money) */ {
 public:
  inline Money() : Money(nullptr) {}
  virtual ~Money();

  Money(const Money& from);
  Money(Money&& from) noexcept
    : Money() {
    *this = ::std::move(from);
  }

  inline Money& operator=(const Money& from) {
    CopyFrom(from);
    return *this;
  }
  inline Money& operator=(Money&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Money& default_instance();

  static inline const Money* internal_default_instance() {
    return reinterpret_cast<const Money*>(
               &_Money_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Money& a, Money& b) {
    a.Swap(&b);
  }
  inline void Swap(Money* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Money* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Money* New() const final {
    return CreateMaybeMessage<Money>(nullptr);
  }

  Money* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Money>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Money& from);
  void MergeFrom(const Money& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Money* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.Money";
  }
  protected:
  explicit Money(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodeFieldNumber = 1,
    kUnitsFieldNumber = 2,
    kNanosFieldNumber = 3,
  };
  // string currency_code = 1;
  void clear_currency_code();
  const std::string& currency_code() const;
  void set_currency_code(const std::string& value);
  void set_currency_code(std::string&& value);
  void set_currency_code(const char* value);
  void set_currency_code(const char* value, size_t size);
  std::string* mutable_currency_code();
  std::string* release_currency_code();
  void set_allocated_currency_code(std::string* currency_code);
  private:
  const std::string& _internal_currency_code() const;
  void _internal_set_currency_code(const std::string& value);
  std::string* _internal_mutable_currency_code();
  public:

  // int64 units = 2;
  void clear_units();
  ::PROTOBUF_NAMESPACE_ID::int64 units() const;
  void set_units(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_units() const;
  void _internal_set_units(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 nanos = 3;
  void clear_nanos();
  ::PROTOBUF_NAMESPACE_ID::int32 nanos() const;
  void set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nanos() const;
  void _internal_set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.Money)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_code_;
  ::PROTOBUF_NAMESPACE_ID::int64 units_;
  ::PROTOBUF_NAMESPACE_ID::int32 nanos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class GetSupportedCurrenciesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.GetSupportedCurrenciesResponse) */ {
 public:
  inline GetSupportedCurrenciesResponse() : GetSupportedCurrenciesResponse(nullptr) {}
  virtual ~GetSupportedCurrenciesResponse();

  GetSupportedCurrenciesResponse(const GetSupportedCurrenciesResponse& from);
  GetSupportedCurrenciesResponse(GetSupportedCurrenciesResponse&& from) noexcept
    : GetSupportedCurrenciesResponse() {
    *this = ::std::move(from);
  }

  inline GetSupportedCurrenciesResponse& operator=(const GetSupportedCurrenciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSupportedCurrenciesResponse& operator=(GetSupportedCurrenciesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSupportedCurrenciesResponse& default_instance();

  static inline const GetSupportedCurrenciesResponse* internal_default_instance() {
    return reinterpret_cast<const GetSupportedCurrenciesResponse*>(
               &_GetSupportedCurrenciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetSupportedCurrenciesResponse& a, GetSupportedCurrenciesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSupportedCurrenciesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSupportedCurrenciesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSupportedCurrenciesResponse* New() const final {
    return CreateMaybeMessage<GetSupportedCurrenciesResponse>(nullptr);
  }

  GetSupportedCurrenciesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSupportedCurrenciesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSupportedCurrenciesResponse& from);
  void MergeFrom(const GetSupportedCurrenciesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSupportedCurrenciesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.GetSupportedCurrenciesResponse";
  }
  protected:
  explicit GetSupportedCurrenciesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyCodesFieldNumber = 1,
  };
  // repeated string currency_codes = 1;
  int currency_codes_size() const;
  private:
  int _internal_currency_codes_size() const;
  public:
  void clear_currency_codes();
  const std::string& currency_codes(int index) const;
  std::string* mutable_currency_codes(int index);
  void set_currency_codes(int index, const std::string& value);
  void set_currency_codes(int index, std::string&& value);
  void set_currency_codes(int index, const char* value);
  void set_currency_codes(int index, const char* value, size_t size);
  std::string* add_currency_codes();
  void add_currency_codes(const std::string& value);
  void add_currency_codes(std::string&& value);
  void add_currency_codes(const char* value);
  void add_currency_codes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& currency_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_currency_codes();
  private:
  const std::string& _internal_currency_codes(int index) const;
  std::string* _internal_add_currency_codes();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.GetSupportedCurrenciesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> currency_codes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CurrencyConversionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.CurrencyConversionRequest) */ {
 public:
  inline CurrencyConversionRequest() : CurrencyConversionRequest(nullptr) {}
  virtual ~CurrencyConversionRequest();

  CurrencyConversionRequest(const CurrencyConversionRequest& from);
  CurrencyConversionRequest(CurrencyConversionRequest&& from) noexcept
    : CurrencyConversionRequest() {
    *this = ::std::move(from);
  }

  inline CurrencyConversionRequest& operator=(const CurrencyConversionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrencyConversionRequest& operator=(CurrencyConversionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CurrencyConversionRequest& default_instance();

  static inline const CurrencyConversionRequest* internal_default_instance() {
    return reinterpret_cast<const CurrencyConversionRequest*>(
               &_CurrencyConversionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CurrencyConversionRequest& a, CurrencyConversionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CurrencyConversionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrencyConversionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CurrencyConversionRequest* New() const final {
    return CreateMaybeMessage<CurrencyConversionRequest>(nullptr);
  }

  CurrencyConversionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CurrencyConversionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CurrencyConversionRequest& from);
  void MergeFrom(const CurrencyConversionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CurrencyConversionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.CurrencyConversionRequest";
  }
  protected:
  explicit CurrencyConversionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToCodeFieldNumber = 2,
    kFromFieldNumber = 1,
  };
  // string to_code = 2;
  void clear_to_code();
  const std::string& to_code() const;
  void set_to_code(const std::string& value);
  void set_to_code(std::string&& value);
  void set_to_code(const char* value);
  void set_to_code(const char* value, size_t size);
  std::string* mutable_to_code();
  std::string* release_to_code();
  void set_allocated_to_code(std::string* to_code);
  private:
  const std::string& _internal_to_code() const;
  void _internal_set_to_code(const std::string& value);
  std::string* _internal_mutable_to_code();
  public:

  // .hipstershop.Money from = 1;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  const ::hipstershop::Money& from() const;
  ::hipstershop::Money* release_from();
  ::hipstershop::Money* mutable_from();
  void set_allocated_from(::hipstershop::Money* from);
  private:
  const ::hipstershop::Money& _internal_from() const;
  ::hipstershop::Money* _internal_mutable_from();
  public:
  void unsafe_arena_set_allocated_from(
      ::hipstershop::Money* from);
  ::hipstershop::Money* unsafe_arena_release_from();

  // @@protoc_insertion_point(class_scope:hipstershop.CurrencyConversionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_code_;
  ::hipstershop::Money* from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class CreditCardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.CreditCardInfo) */ {
 public:
  inline CreditCardInfo() : CreditCardInfo(nullptr) {}
  virtual ~CreditCardInfo();

  CreditCardInfo(const CreditCardInfo& from);
  CreditCardInfo(CreditCardInfo&& from) noexcept
    : CreditCardInfo() {
    *this = ::std::move(from);
  }

  inline CreditCardInfo& operator=(const CreditCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreditCardInfo& operator=(CreditCardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreditCardInfo& default_instance();

  static inline const CreditCardInfo* internal_default_instance() {
    return reinterpret_cast<const CreditCardInfo*>(
               &_CreditCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CreditCardInfo& a, CreditCardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CreditCardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreditCardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreditCardInfo* New() const final {
    return CreateMaybeMessage<CreditCardInfo>(nullptr);
  }

  CreditCardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreditCardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreditCardInfo& from);
  void MergeFrom(const CreditCardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreditCardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.CreditCardInfo";
  }
  protected:
  explicit CreditCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreditCardNumberFieldNumber = 1,
    kCreditCardCvvFieldNumber = 2,
    kCreditCardExpirationYearFieldNumber = 3,
    kCreditCardExpirationMonthFieldNumber = 4,
  };
  // string credit_card_number = 1;
  void clear_credit_card_number();
  const std::string& credit_card_number() const;
  void set_credit_card_number(const std::string& value);
  void set_credit_card_number(std::string&& value);
  void set_credit_card_number(const char* value);
  void set_credit_card_number(const char* value, size_t size);
  std::string* mutable_credit_card_number();
  std::string* release_credit_card_number();
  void set_allocated_credit_card_number(std::string* credit_card_number);
  private:
  const std::string& _internal_credit_card_number() const;
  void _internal_set_credit_card_number(const std::string& value);
  std::string* _internal_mutable_credit_card_number();
  public:

  // int32 credit_card_cvv = 2;
  void clear_credit_card_cvv();
  ::PROTOBUF_NAMESPACE_ID::int32 credit_card_cvv() const;
  void set_credit_card_cvv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_credit_card_cvv() const;
  void _internal_set_credit_card_cvv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 credit_card_expiration_year = 3;
  void clear_credit_card_expiration_year();
  ::PROTOBUF_NAMESPACE_ID::int32 credit_card_expiration_year() const;
  void set_credit_card_expiration_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_credit_card_expiration_year() const;
  void _internal_set_credit_card_expiration_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 credit_card_expiration_month = 4;
  void clear_credit_card_expiration_month();
  ::PROTOBUF_NAMESPACE_ID::int32 credit_card_expiration_month() const;
  void set_credit_card_expiration_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_credit_card_expiration_month() const;
  void _internal_set_credit_card_expiration_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.CreditCardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr credit_card_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 credit_card_cvv_;
  ::PROTOBUF_NAMESPACE_ID::int32 credit_card_expiration_year_;
  ::PROTOBUF_NAMESPACE_ID::int32 credit_card_expiration_month_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class ChargeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.ChargeRequest) */ {
 public:
  inline ChargeRequest() : ChargeRequest(nullptr) {}
  virtual ~ChargeRequest();

  ChargeRequest(const ChargeRequest& from);
  ChargeRequest(ChargeRequest&& from) noexcept
    : ChargeRequest() {
    *this = ::std::move(from);
  }

  inline ChargeRequest& operator=(const ChargeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChargeRequest& operator=(ChargeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChargeRequest& default_instance();

  static inline const ChargeRequest* internal_default_instance() {
    return reinterpret_cast<const ChargeRequest*>(
               &_ChargeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ChargeRequest& a, ChargeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChargeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChargeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChargeRequest* New() const final {
    return CreateMaybeMessage<ChargeRequest>(nullptr);
  }

  ChargeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChargeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChargeRequest& from);
  void MergeFrom(const ChargeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChargeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.ChargeRequest";
  }
  protected:
  explicit ChargeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kCreditCardFieldNumber = 2,
  };
  // .hipstershop.Money amount = 1;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::hipstershop::Money& amount() const;
  ::hipstershop::Money* release_amount();
  ::hipstershop::Money* mutable_amount();
  void set_allocated_amount(::hipstershop::Money* amount);
  private:
  const ::hipstershop::Money& _internal_amount() const;
  ::hipstershop::Money* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::hipstershop::Money* amount);
  ::hipstershop::Money* unsafe_arena_release_amount();

  // .hipstershop.CreditCardInfo credit_card = 2;
  bool has_credit_card() const;
  private:
  bool _internal_has_credit_card() const;
  public:
  void clear_credit_card();
  const ::hipstershop::CreditCardInfo& credit_card() const;
  ::hipstershop::CreditCardInfo* release_credit_card();
  ::hipstershop::CreditCardInfo* mutable_credit_card();
  void set_allocated_credit_card(::hipstershop::CreditCardInfo* credit_card);
  private:
  const ::hipstershop::CreditCardInfo& _internal_credit_card() const;
  ::hipstershop::CreditCardInfo* _internal_mutable_credit_card();
  public:
  void unsafe_arena_set_allocated_credit_card(
      ::hipstershop::CreditCardInfo* credit_card);
  ::hipstershop::CreditCardInfo* unsafe_arena_release_credit_card();

  // @@protoc_insertion_point(class_scope:hipstershop.ChargeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::hipstershop::Money* amount_;
  ::hipstershop::CreditCardInfo* credit_card_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class ChargeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.ChargeResponse) */ {
 public:
  inline ChargeResponse() : ChargeResponse(nullptr) {}
  virtual ~ChargeResponse();

  ChargeResponse(const ChargeResponse& from);
  ChargeResponse(ChargeResponse&& from) noexcept
    : ChargeResponse() {
    *this = ::std::move(from);
  }

  inline ChargeResponse& operator=(const ChargeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChargeResponse& operator=(ChargeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChargeResponse& default_instance();

  static inline const ChargeResponse* internal_default_instance() {
    return reinterpret_cast<const ChargeResponse*>(
               &_ChargeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ChargeResponse& a, ChargeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChargeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChargeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChargeResponse* New() const final {
    return CreateMaybeMessage<ChargeResponse>(nullptr);
  }

  ChargeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChargeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChargeResponse& from);
  void MergeFrom(const ChargeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChargeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.ChargeResponse";
  }
  protected:
  explicit ChargeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
  };
  // string transaction_id = 1;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.ChargeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class OrderItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.OrderItem) */ {
 public:
  inline OrderItem() : OrderItem(nullptr) {}
  virtual ~OrderItem();

  OrderItem(const OrderItem& from);
  OrderItem(OrderItem&& from) noexcept
    : OrderItem() {
    *this = ::std::move(from);
  }

  inline OrderItem& operator=(const OrderItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderItem& operator=(OrderItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderItem& default_instance();

  static inline const OrderItem* internal_default_instance() {
    return reinterpret_cast<const OrderItem*>(
               &_OrderItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(OrderItem& a, OrderItem& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderItem* New() const final {
    return CreateMaybeMessage<OrderItem>(nullptr);
  }

  OrderItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderItem& from);
  void MergeFrom(const OrderItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.OrderItem";
  }
  protected:
  explicit OrderItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kCostFieldNumber = 2,
  };
  // .hipstershop.CartItem item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::hipstershop::CartItem& item() const;
  ::hipstershop::CartItem* release_item();
  ::hipstershop::CartItem* mutable_item();
  void set_allocated_item(::hipstershop::CartItem* item);
  private:
  const ::hipstershop::CartItem& _internal_item() const;
  ::hipstershop::CartItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::hipstershop::CartItem* item);
  ::hipstershop::CartItem* unsafe_arena_release_item();

  // .hipstershop.Money cost = 2;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const ::hipstershop::Money& cost() const;
  ::hipstershop::Money* release_cost();
  ::hipstershop::Money* mutable_cost();
  void set_allocated_cost(::hipstershop::Money* cost);
  private:
  const ::hipstershop::Money& _internal_cost() const;
  ::hipstershop::Money* _internal_mutable_cost();
  public:
  void unsafe_arena_set_allocated_cost(
      ::hipstershop::Money* cost);
  ::hipstershop::Money* unsafe_arena_release_cost();

  // @@protoc_insertion_point(class_scope:hipstershop.OrderItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::hipstershop::CartItem* item_;
  ::hipstershop::Money* cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class OrderResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.OrderResult) */ {
 public:
  inline OrderResult() : OrderResult(nullptr) {}
  virtual ~OrderResult();

  OrderResult(const OrderResult& from);
  OrderResult(OrderResult&& from) noexcept
    : OrderResult() {
    *this = ::std::move(from);
  }

  inline OrderResult& operator=(const OrderResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderResult& operator=(OrderResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderResult& default_instance();

  static inline const OrderResult* internal_default_instance() {
    return reinterpret_cast<const OrderResult*>(
               &_OrderResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(OrderResult& a, OrderResult& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderResult* New() const final {
    return CreateMaybeMessage<OrderResult>(nullptr);
  }

  OrderResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderResult& from);
  void MergeFrom(const OrderResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.OrderResult";
  }
  protected:
  explicit OrderResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 5,
    kOrderIdFieldNumber = 1,
    kShippingTrackingIdFieldNumber = 2,
    kShippingCostFieldNumber = 3,
    kShippingAddressFieldNumber = 4,
  };
  // repeated .hipstershop.OrderItem items = 5;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::hipstershop::OrderItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::OrderItem >*
      mutable_items();
  private:
  const ::hipstershop::OrderItem& _internal_items(int index) const;
  ::hipstershop::OrderItem* _internal_add_items();
  public:
  const ::hipstershop::OrderItem& items(int index) const;
  ::hipstershop::OrderItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::OrderItem >&
      items() const;

  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  void set_order_id(const std::string& value);
  void set_order_id(std::string&& value);
  void set_order_id(const char* value);
  void set_order_id(const char* value, size_t size);
  std::string* mutable_order_id();
  std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // string shipping_tracking_id = 2;
  void clear_shipping_tracking_id();
  const std::string& shipping_tracking_id() const;
  void set_shipping_tracking_id(const std::string& value);
  void set_shipping_tracking_id(std::string&& value);
  void set_shipping_tracking_id(const char* value);
  void set_shipping_tracking_id(const char* value, size_t size);
  std::string* mutable_shipping_tracking_id();
  std::string* release_shipping_tracking_id();
  void set_allocated_shipping_tracking_id(std::string* shipping_tracking_id);
  private:
  const std::string& _internal_shipping_tracking_id() const;
  void _internal_set_shipping_tracking_id(const std::string& value);
  std::string* _internal_mutable_shipping_tracking_id();
  public:

  // .hipstershop.Money shipping_cost = 3;
  bool has_shipping_cost() const;
  private:
  bool _internal_has_shipping_cost() const;
  public:
  void clear_shipping_cost();
  const ::hipstershop::Money& shipping_cost() const;
  ::hipstershop::Money* release_shipping_cost();
  ::hipstershop::Money* mutable_shipping_cost();
  void set_allocated_shipping_cost(::hipstershop::Money* shipping_cost);
  private:
  const ::hipstershop::Money& _internal_shipping_cost() const;
  ::hipstershop::Money* _internal_mutable_shipping_cost();
  public:
  void unsafe_arena_set_allocated_shipping_cost(
      ::hipstershop::Money* shipping_cost);
  ::hipstershop::Money* unsafe_arena_release_shipping_cost();

  // .hipstershop.Address shipping_address = 4;
  bool has_shipping_address() const;
  private:
  bool _internal_has_shipping_address() const;
  public:
  void clear_shipping_address();
  const ::hipstershop::Address& shipping_address() const;
  ::hipstershop::Address* release_shipping_address();
  ::hipstershop::Address* mutable_shipping_address();
  void set_allocated_shipping_address(::hipstershop::Address* shipping_address);
  private:
  const ::hipstershop::Address& _internal_shipping_address() const;
  ::hipstershop::Address* _internal_mutable_shipping_address();
  public:
  void unsafe_arena_set_allocated_shipping_address(
      ::hipstershop::Address* shipping_address);
  ::hipstershop::Address* unsafe_arena_release_shipping_address();

  // @@protoc_insertion_point(class_scope:hipstershop.OrderResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::OrderItem > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shipping_tracking_id_;
  ::hipstershop::Money* shipping_cost_;
  ::hipstershop::Address* shipping_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class SendOrderConfirmationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.SendOrderConfirmationRequest) */ {
 public:
  inline SendOrderConfirmationRequest() : SendOrderConfirmationRequest(nullptr) {}
  virtual ~SendOrderConfirmationRequest();

  SendOrderConfirmationRequest(const SendOrderConfirmationRequest& from);
  SendOrderConfirmationRequest(SendOrderConfirmationRequest&& from) noexcept
    : SendOrderConfirmationRequest() {
    *this = ::std::move(from);
  }

  inline SendOrderConfirmationRequest& operator=(const SendOrderConfirmationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOrderConfirmationRequest& operator=(SendOrderConfirmationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendOrderConfirmationRequest& default_instance();

  static inline const SendOrderConfirmationRequest* internal_default_instance() {
    return reinterpret_cast<const SendOrderConfirmationRequest*>(
               &_SendOrderConfirmationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SendOrderConfirmationRequest& a, SendOrderConfirmationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOrderConfirmationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOrderConfirmationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOrderConfirmationRequest* New() const final {
    return CreateMaybeMessage<SendOrderConfirmationRequest>(nullptr);
  }

  SendOrderConfirmationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOrderConfirmationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOrderConfirmationRequest& from);
  void MergeFrom(const SendOrderConfirmationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOrderConfirmationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.SendOrderConfirmationRequest";
  }
  protected:
  explicit SendOrderConfirmationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kOrderFieldNumber = 2,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .hipstershop.OrderResult order = 2;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::hipstershop::OrderResult& order() const;
  ::hipstershop::OrderResult* release_order();
  ::hipstershop::OrderResult* mutable_order();
  void set_allocated_order(::hipstershop::OrderResult* order);
  private:
  const ::hipstershop::OrderResult& _internal_order() const;
  ::hipstershop::OrderResult* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::hipstershop::OrderResult* order);
  ::hipstershop::OrderResult* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:hipstershop.SendOrderConfirmationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::hipstershop::OrderResult* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.PlaceOrderRequest) */ {
 public:
  inline PlaceOrderRequest() : PlaceOrderRequest(nullptr) {}
  virtual ~PlaceOrderRequest();

  PlaceOrderRequest(const PlaceOrderRequest& from);
  PlaceOrderRequest(PlaceOrderRequest&& from) noexcept
    : PlaceOrderRequest() {
    *this = ::std::move(from);
  }

  inline PlaceOrderRequest& operator=(const PlaceOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderRequest& operator=(PlaceOrderRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderRequest& default_instance();

  static inline const PlaceOrderRequest* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderRequest*>(
               &_PlaceOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(PlaceOrderRequest& a, PlaceOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceOrderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderRequest* New() const final {
    return CreateMaybeMessage<PlaceOrderRequest>(nullptr);
  }

  PlaceOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderRequest& from);
  void MergeFrom(const PlaceOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.PlaceOrderRequest";
  }
  protected:
  explicit PlaceOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserCurrencyFieldNumber = 2,
    kEmailFieldNumber = 5,
    kAddressFieldNumber = 3,
    kCreditCardFieldNumber = 6,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string user_currency = 2;
  void clear_user_currency();
  const std::string& user_currency() const;
  void set_user_currency(const std::string& value);
  void set_user_currency(std::string&& value);
  void set_user_currency(const char* value);
  void set_user_currency(const char* value, size_t size);
  std::string* mutable_user_currency();
  std::string* release_user_currency();
  void set_allocated_user_currency(std::string* user_currency);
  private:
  const std::string& _internal_user_currency() const;
  void _internal_set_user_currency(const std::string& value);
  std::string* _internal_mutable_user_currency();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .hipstershop.Address address = 3;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::hipstershop::Address& address() const;
  ::hipstershop::Address* release_address();
  ::hipstershop::Address* mutable_address();
  void set_allocated_address(::hipstershop::Address* address);
  private:
  const ::hipstershop::Address& _internal_address() const;
  ::hipstershop::Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::hipstershop::Address* address);
  ::hipstershop::Address* unsafe_arena_release_address();

  // .hipstershop.CreditCardInfo credit_card = 6;
  bool has_credit_card() const;
  private:
  bool _internal_has_credit_card() const;
  public:
  void clear_credit_card();
  const ::hipstershop::CreditCardInfo& credit_card() const;
  ::hipstershop::CreditCardInfo* release_credit_card();
  ::hipstershop::CreditCardInfo* mutable_credit_card();
  void set_allocated_credit_card(::hipstershop::CreditCardInfo* credit_card);
  private:
  const ::hipstershop::CreditCardInfo& _internal_credit_card() const;
  ::hipstershop::CreditCardInfo* _internal_mutable_credit_card();
  public:
  void unsafe_arena_set_allocated_credit_card(
      ::hipstershop::CreditCardInfo* credit_card);
  ::hipstershop::CreditCardInfo* unsafe_arena_release_credit_card();

  // @@protoc_insertion_point(class_scope:hipstershop.PlaceOrderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::hipstershop::Address* address_;
  ::hipstershop::CreditCardInfo* credit_card_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.PlaceOrderResponse) */ {
 public:
  inline PlaceOrderResponse() : PlaceOrderResponse(nullptr) {}
  virtual ~PlaceOrderResponse();

  PlaceOrderResponse(const PlaceOrderResponse& from);
  PlaceOrderResponse(PlaceOrderResponse&& from) noexcept
    : PlaceOrderResponse() {
    *this = ::std::move(from);
  }

  inline PlaceOrderResponse& operator=(const PlaceOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderResponse& operator=(PlaceOrderResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderResponse& default_instance();

  static inline const PlaceOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderResponse*>(
               &_PlaceOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(PlaceOrderResponse& a, PlaceOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceOrderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderResponse* New() const final {
    return CreateMaybeMessage<PlaceOrderResponse>(nullptr);
  }

  PlaceOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderResponse& from);
  void MergeFrom(const PlaceOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.PlaceOrderResponse";
  }
  protected:
  explicit PlaceOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .hipstershop.OrderResult order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::hipstershop::OrderResult& order() const;
  ::hipstershop::OrderResult* release_order();
  ::hipstershop::OrderResult* mutable_order();
  void set_allocated_order(::hipstershop::OrderResult* order);
  private:
  const ::hipstershop::OrderResult& _internal_order() const;
  ::hipstershop::OrderResult* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::hipstershop::OrderResult* order);
  ::hipstershop::OrderResult* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:hipstershop.PlaceOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::hipstershop::OrderResult* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class AdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.AdRequest) */ {
 public:
  inline AdRequest() : AdRequest(nullptr) {}
  virtual ~AdRequest();

  AdRequest(const AdRequest& from);
  AdRequest(AdRequest&& from) noexcept
    : AdRequest() {
    *this = ::std::move(from);
  }

  inline AdRequest& operator=(const AdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdRequest& operator=(AdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdRequest& default_instance();

  static inline const AdRequest* internal_default_instance() {
    return reinterpret_cast<const AdRequest*>(
               &_AdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AdRequest& a, AdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdRequest* New() const final {
    return CreateMaybeMessage<AdRequest>(nullptr);
  }

  AdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdRequest& from);
  void MergeFrom(const AdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.AdRequest";
  }
  protected:
  explicit AdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContextKeysFieldNumber = 1,
  };
  // repeated string context_keys = 1;
  int context_keys_size() const;
  private:
  int _internal_context_keys_size() const;
  public:
  void clear_context_keys();
  const std::string& context_keys(int index) const;
  std::string* mutable_context_keys(int index);
  void set_context_keys(int index, const std::string& value);
  void set_context_keys(int index, std::string&& value);
  void set_context_keys(int index, const char* value);
  void set_context_keys(int index, const char* value, size_t size);
  std::string* add_context_keys();
  void add_context_keys(const std::string& value);
  void add_context_keys(std::string&& value);
  void add_context_keys(const char* value);
  void add_context_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& context_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_context_keys();
  private:
  const std::string& _internal_context_keys(int index) const;
  std::string* _internal_add_context_keys();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.AdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> context_keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class AdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.AdResponse) */ {
 public:
  inline AdResponse() : AdResponse(nullptr) {}
  virtual ~AdResponse();

  AdResponse(const AdResponse& from);
  AdResponse(AdResponse&& from) noexcept
    : AdResponse() {
    *this = ::std::move(from);
  }

  inline AdResponse& operator=(const AdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdResponse& operator=(AdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdResponse& default_instance();

  static inline const AdResponse* internal_default_instance() {
    return reinterpret_cast<const AdResponse*>(
               &_AdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(AdResponse& a, AdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdResponse* New() const final {
    return CreateMaybeMessage<AdResponse>(nullptr);
  }

  AdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdResponse& from);
  void MergeFrom(const AdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.AdResponse";
  }
  protected:
  explicit AdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdsFieldNumber = 1,
  };
  // repeated .hipstershop.Ad ads = 1;
  int ads_size() const;
  private:
  int _internal_ads_size() const;
  public:
  void clear_ads();
  ::hipstershop::Ad* mutable_ads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Ad >*
      mutable_ads();
  private:
  const ::hipstershop::Ad& _internal_ads(int index) const;
  ::hipstershop::Ad* _internal_add_ads();
  public:
  const ::hipstershop::Ad& ads(int index) const;
  ::hipstershop::Ad* add_ads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Ad >&
      ads() const;

  // @@protoc_insertion_point(class_scope:hipstershop.AdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Ad > ads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// -------------------------------------------------------------------

class Ad PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hipstershop.Ad) */ {
 public:
  inline Ad() : Ad(nullptr) {}
  virtual ~Ad();

  Ad(const Ad& from);
  Ad(Ad&& from) noexcept
    : Ad() {
    *this = ::std::move(from);
  }

  inline Ad& operator=(const Ad& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ad& operator=(Ad&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ad& default_instance();

  static inline const Ad* internal_default_instance() {
    return reinterpret_cast<const Ad*>(
               &_Ad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Ad& a, Ad& b) {
    a.Swap(&b);
  }
  inline void Swap(Ad* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ad* New() const final {
    return CreateMaybeMessage<Ad>(nullptr);
  }

  Ad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ad& from);
  void MergeFrom(const Ad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hipstershop.Ad";
  }
  protected:
  explicit Ad(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_demo_2eproto);
    return ::descriptor_table_demo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedirectUrlFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // string redirect_url = 1;
  void clear_redirect_url();
  const std::string& redirect_url() const;
  void set_redirect_url(const std::string& value);
  void set_redirect_url(std::string&& value);
  void set_redirect_url(const char* value);
  void set_redirect_url(const char* value, size_t size);
  std::string* mutable_redirect_url();
  std::string* release_redirect_url();
  void set_allocated_redirect_url(std::string* redirect_url);
  private:
  const std::string& _internal_redirect_url() const;
  void _internal_set_redirect_url(const std::string& value);
  std::string* _internal_mutable_redirect_url();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:hipstershop.Ad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_demo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CartItem

// string product_id = 1;
inline void CartItem::clear_product_id() {
  product_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CartItem::product_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.CartItem.product_id)
  return _internal_product_id();
}
inline void CartItem::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.CartItem.product_id)
}
inline std::string* CartItem::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.CartItem.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& CartItem::_internal_product_id() const {
  return product_id_.Get();
}
inline void CartItem::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CartItem::set_product_id(std::string&& value) {
  
  product_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.CartItem.product_id)
}
inline void CartItem::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.CartItem.product_id)
}
inline void CartItem::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.CartItem.product_id)
}
inline std::string* CartItem::_internal_mutable_product_id() {
  
  return product_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CartItem::release_product_id() {
  // @@protoc_insertion_point(field_release:hipstershop.CartItem.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CartItem::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.CartItem.product_id)
}

// int32 quantity = 2;
inline void CartItem::clear_quantity() {
  quantity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CartItem::quantity() const {
  // @@protoc_insertion_point(field_get:hipstershop.CartItem.quantity)
  return _internal_quantity();
}
inline void CartItem::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  quantity_ = value;
}
inline void CartItem::set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:hipstershop.CartItem.quantity)
}

// -------------------------------------------------------------------

// AddItemRequest

// string user_id = 1;
inline void AddItemRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AddItemRequest::user_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.AddItemRequest.user_id)
  return _internal_user_id();
}
inline void AddItemRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.AddItemRequest.user_id)
}
inline std::string* AddItemRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.AddItemRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& AddItemRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void AddItemRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AddItemRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.AddItemRequest.user_id)
}
inline void AddItemRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.AddItemRequest.user_id)
}
inline void AddItemRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.AddItemRequest.user_id)
}
inline std::string* AddItemRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AddItemRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:hipstershop.AddItemRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddItemRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.AddItemRequest.user_id)
}

// .hipstershop.CartItem item = 2;
inline bool AddItemRequest::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool AddItemRequest::has_item() const {
  return _internal_has_item();
}
inline void AddItemRequest::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::hipstershop::CartItem& AddItemRequest::_internal_item() const {
  const ::hipstershop::CartItem* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::CartItem&>(
      ::hipstershop::_CartItem_default_instance_);
}
inline const ::hipstershop::CartItem& AddItemRequest::item() const {
  // @@protoc_insertion_point(field_get:hipstershop.AddItemRequest.item)
  return _internal_item();
}
inline void AddItemRequest::unsafe_arena_set_allocated_item(
    ::hipstershop::CartItem* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.AddItemRequest.item)
}
inline ::hipstershop::CartItem* AddItemRequest::release_item() {
  
  ::hipstershop::CartItem* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::CartItem* AddItemRequest::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:hipstershop.AddItemRequest.item)
  
  ::hipstershop::CartItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::hipstershop::CartItem* AddItemRequest::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::CartItem>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::hipstershop::CartItem* AddItemRequest::mutable_item() {
  // @@protoc_insertion_point(field_mutable:hipstershop.AddItemRequest.item)
  return _internal_mutable_item();
}
inline void AddItemRequest::set_allocated_item(::hipstershop::CartItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.AddItemRequest.item)
}

// -------------------------------------------------------------------

// EmptyCartRequest

// string user_id = 1;
inline void EmptyCartRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EmptyCartRequest::user_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.EmptyCartRequest.user_id)
  return _internal_user_id();
}
inline void EmptyCartRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.EmptyCartRequest.user_id)
}
inline std::string* EmptyCartRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.EmptyCartRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& EmptyCartRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void EmptyCartRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EmptyCartRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.EmptyCartRequest.user_id)
}
inline void EmptyCartRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.EmptyCartRequest.user_id)
}
inline void EmptyCartRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.EmptyCartRequest.user_id)
}
inline std::string* EmptyCartRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EmptyCartRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:hipstershop.EmptyCartRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmptyCartRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.EmptyCartRequest.user_id)
}

// -------------------------------------------------------------------

// GetCartRequest

// string user_id = 1;
inline void GetCartRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCartRequest::user_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.GetCartRequest.user_id)
  return _internal_user_id();
}
inline void GetCartRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.GetCartRequest.user_id)
}
inline std::string* GetCartRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.GetCartRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& GetCartRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void GetCartRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCartRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.GetCartRequest.user_id)
}
inline void GetCartRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.GetCartRequest.user_id)
}
inline void GetCartRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.GetCartRequest.user_id)
}
inline std::string* GetCartRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCartRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:hipstershop.GetCartRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCartRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.GetCartRequest.user_id)
}

// -------------------------------------------------------------------

// Cart

// string user_id = 1;
inline void Cart::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Cart::user_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.Cart.user_id)
  return _internal_user_id();
}
inline void Cart::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.Cart.user_id)
}
inline std::string* Cart::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Cart.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& Cart::_internal_user_id() const {
  return user_id_.Get();
}
inline void Cart::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Cart::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Cart.user_id)
}
inline void Cart::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Cart.user_id)
}
inline void Cart::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Cart.user_id)
}
inline std::string* Cart::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Cart::release_user_id() {
  // @@protoc_insertion_point(field_release:hipstershop.Cart.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Cart::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Cart.user_id)
}

// repeated .hipstershop.CartItem items = 2;
inline int Cart::_internal_items_size() const {
  return items_.size();
}
inline int Cart::items_size() const {
  return _internal_items_size();
}
inline void Cart::clear_items() {
  items_.Clear();
}
inline ::hipstershop::CartItem* Cart::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.Cart.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >*
Cart::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.Cart.items)
  return &items_;
}
inline const ::hipstershop::CartItem& Cart::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::hipstershop::CartItem& Cart::items(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.Cart.items)
  return _internal_items(index);
}
inline ::hipstershop::CartItem* Cart::_internal_add_items() {
  return items_.Add();
}
inline ::hipstershop::CartItem* Cart::add_items() {
  // @@protoc_insertion_point(field_add:hipstershop.Cart.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >&
Cart::items() const {
  // @@protoc_insertion_point(field_list:hipstershop.Cart.items)
  return items_;
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// ListRecommendationsRequest

// string user_id = 1;
inline void ListRecommendationsRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ListRecommendationsRequest::user_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.ListRecommendationsRequest.user_id)
  return _internal_user_id();
}
inline void ListRecommendationsRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.ListRecommendationsRequest.user_id)
}
inline std::string* ListRecommendationsRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.ListRecommendationsRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& ListRecommendationsRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void ListRecommendationsRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ListRecommendationsRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.ListRecommendationsRequest.user_id)
}
inline void ListRecommendationsRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.ListRecommendationsRequest.user_id)
}
inline void ListRecommendationsRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.ListRecommendationsRequest.user_id)
}
inline std::string* ListRecommendationsRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ListRecommendationsRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:hipstershop.ListRecommendationsRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ListRecommendationsRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.ListRecommendationsRequest.user_id)
}

// repeated string product_ids = 2;
inline int ListRecommendationsRequest::_internal_product_ids_size() const {
  return product_ids_.size();
}
inline int ListRecommendationsRequest::product_ids_size() const {
  return _internal_product_ids_size();
}
inline void ListRecommendationsRequest::clear_product_ids() {
  product_ids_.Clear();
}
inline std::string* ListRecommendationsRequest::add_product_ids() {
  // @@protoc_insertion_point(field_add_mutable:hipstershop.ListRecommendationsRequest.product_ids)
  return _internal_add_product_ids();
}
inline const std::string& ListRecommendationsRequest::_internal_product_ids(int index) const {
  return product_ids_.Get(index);
}
inline const std::string& ListRecommendationsRequest::product_ids(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.ListRecommendationsRequest.product_ids)
  return _internal_product_ids(index);
}
inline std::string* ListRecommendationsRequest::mutable_product_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.ListRecommendationsRequest.product_ids)
  return product_ids_.Mutable(index);
}
inline void ListRecommendationsRequest::set_product_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hipstershop.ListRecommendationsRequest.product_ids)
  product_ids_.Mutable(index)->assign(value);
}
inline void ListRecommendationsRequest::set_product_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hipstershop.ListRecommendationsRequest.product_ids)
  product_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListRecommendationsRequest::set_product_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  product_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hipstershop.ListRecommendationsRequest.product_ids)
}
inline void ListRecommendationsRequest::set_product_ids(int index, const char* value, size_t size) {
  product_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hipstershop.ListRecommendationsRequest.product_ids)
}
inline std::string* ListRecommendationsRequest::_internal_add_product_ids() {
  return product_ids_.Add();
}
inline void ListRecommendationsRequest::add_product_ids(const std::string& value) {
  product_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hipstershop.ListRecommendationsRequest.product_ids)
}
inline void ListRecommendationsRequest::add_product_ids(std::string&& value) {
  product_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hipstershop.ListRecommendationsRequest.product_ids)
}
inline void ListRecommendationsRequest::add_product_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  product_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hipstershop.ListRecommendationsRequest.product_ids)
}
inline void ListRecommendationsRequest::add_product_ids(const char* value, size_t size) {
  product_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hipstershop.ListRecommendationsRequest.product_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRecommendationsRequest::product_ids() const {
  // @@protoc_insertion_point(field_list:hipstershop.ListRecommendationsRequest.product_ids)
  return product_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListRecommendationsRequest::mutable_product_ids() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.ListRecommendationsRequest.product_ids)
  return &product_ids_;
}

// -------------------------------------------------------------------

// ListRecommendationsResponse

// repeated string product_ids = 1;
inline int ListRecommendationsResponse::_internal_product_ids_size() const {
  return product_ids_.size();
}
inline int ListRecommendationsResponse::product_ids_size() const {
  return _internal_product_ids_size();
}
inline void ListRecommendationsResponse::clear_product_ids() {
  product_ids_.Clear();
}
inline std::string* ListRecommendationsResponse::add_product_ids() {
  // @@protoc_insertion_point(field_add_mutable:hipstershop.ListRecommendationsResponse.product_ids)
  return _internal_add_product_ids();
}
inline const std::string& ListRecommendationsResponse::_internal_product_ids(int index) const {
  return product_ids_.Get(index);
}
inline const std::string& ListRecommendationsResponse::product_ids(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.ListRecommendationsResponse.product_ids)
  return _internal_product_ids(index);
}
inline std::string* ListRecommendationsResponse::mutable_product_ids(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.ListRecommendationsResponse.product_ids)
  return product_ids_.Mutable(index);
}
inline void ListRecommendationsResponse::set_product_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hipstershop.ListRecommendationsResponse.product_ids)
  product_ids_.Mutable(index)->assign(value);
}
inline void ListRecommendationsResponse::set_product_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hipstershop.ListRecommendationsResponse.product_ids)
  product_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListRecommendationsResponse::set_product_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  product_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hipstershop.ListRecommendationsResponse.product_ids)
}
inline void ListRecommendationsResponse::set_product_ids(int index, const char* value, size_t size) {
  product_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hipstershop.ListRecommendationsResponse.product_ids)
}
inline std::string* ListRecommendationsResponse::_internal_add_product_ids() {
  return product_ids_.Add();
}
inline void ListRecommendationsResponse::add_product_ids(const std::string& value) {
  product_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hipstershop.ListRecommendationsResponse.product_ids)
}
inline void ListRecommendationsResponse::add_product_ids(std::string&& value) {
  product_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hipstershop.ListRecommendationsResponse.product_ids)
}
inline void ListRecommendationsResponse::add_product_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  product_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hipstershop.ListRecommendationsResponse.product_ids)
}
inline void ListRecommendationsResponse::add_product_ids(const char* value, size_t size) {
  product_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hipstershop.ListRecommendationsResponse.product_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListRecommendationsResponse::product_ids() const {
  // @@protoc_insertion_point(field_list:hipstershop.ListRecommendationsResponse.product_ids)
  return product_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListRecommendationsResponse::mutable_product_ids() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.ListRecommendationsResponse.product_ids)
  return &product_ids_;
}

// -------------------------------------------------------------------

// Product

// string id = 1;
inline void Product::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Product::id() const {
  // @@protoc_insertion_point(field_get:hipstershop.Product.id)
  return _internal_id();
}
inline void Product::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.Product.id)
}
inline std::string* Product::mutable_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Product.id)
  return _internal_mutable_id();
}
inline const std::string& Product::_internal_id() const {
  return id_.Get();
}
inline void Product::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Product::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Product.id)
}
inline void Product::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Product.id)
}
inline void Product::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Product.id)
}
inline std::string* Product::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Product::release_id() {
  // @@protoc_insertion_point(field_release:hipstershop.Product.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Product::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Product.id)
}

// string name = 2;
inline void Product::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Product::name() const {
  // @@protoc_insertion_point(field_get:hipstershop.Product.name)
  return _internal_name();
}
inline void Product::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:hipstershop.Product.name)
}
inline std::string* Product::mutable_name() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Product.name)
  return _internal_mutable_name();
}
inline const std::string& Product::_internal_name() const {
  return name_.Get();
}
inline void Product::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Product::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Product.name)
}
inline void Product::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Product.name)
}
inline void Product::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Product.name)
}
inline std::string* Product::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Product::release_name() {
  // @@protoc_insertion_point(field_release:hipstershop.Product.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Product::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Product.name)
}

// string description = 3;
inline void Product::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Product::description() const {
  // @@protoc_insertion_point(field_get:hipstershop.Product.description)
  return _internal_description();
}
inline void Product::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:hipstershop.Product.description)
}
inline std::string* Product::mutable_description() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Product.description)
  return _internal_mutable_description();
}
inline const std::string& Product::_internal_description() const {
  return description_.Get();
}
inline void Product::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Product::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Product.description)
}
inline void Product::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Product.description)
}
inline void Product::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Product.description)
}
inline std::string* Product::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Product::release_description() {
  // @@protoc_insertion_point(field_release:hipstershop.Product.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Product::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Product.description)
}

// string picture = 4;
inline void Product::clear_picture() {
  picture_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Product::picture() const {
  // @@protoc_insertion_point(field_get:hipstershop.Product.picture)
  return _internal_picture();
}
inline void Product::set_picture(const std::string& value) {
  _internal_set_picture(value);
  // @@protoc_insertion_point(field_set:hipstershop.Product.picture)
}
inline std::string* Product::mutable_picture() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Product.picture)
  return _internal_mutable_picture();
}
inline const std::string& Product::_internal_picture() const {
  return picture_.Get();
}
inline void Product::_internal_set_picture(const std::string& value) {
  
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Product::set_picture(std::string&& value) {
  
  picture_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Product.picture)
}
inline void Product::set_picture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Product.picture)
}
inline void Product::set_picture(const char* value,
    size_t size) {
  
  picture_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Product.picture)
}
inline std::string* Product::_internal_mutable_picture() {
  
  return picture_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Product::release_picture() {
  // @@protoc_insertion_point(field_release:hipstershop.Product.picture)
  return picture_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Product::set_allocated_picture(std::string* picture) {
  if (picture != nullptr) {
    
  } else {
    
  }
  picture_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), picture,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Product.picture)
}

// .hipstershop.Money price_usd = 5;
inline bool Product::_internal_has_price_usd() const {
  return this != internal_default_instance() && price_usd_ != nullptr;
}
inline bool Product::has_price_usd() const {
  return _internal_has_price_usd();
}
inline void Product::clear_price_usd() {
  if (GetArena() == nullptr && price_usd_ != nullptr) {
    delete price_usd_;
  }
  price_usd_ = nullptr;
}
inline const ::hipstershop::Money& Product::_internal_price_usd() const {
  const ::hipstershop::Money* p = price_usd_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Money&>(
      ::hipstershop::_Money_default_instance_);
}
inline const ::hipstershop::Money& Product::price_usd() const {
  // @@protoc_insertion_point(field_get:hipstershop.Product.price_usd)
  return _internal_price_usd();
}
inline void Product::unsafe_arena_set_allocated_price_usd(
    ::hipstershop::Money* price_usd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_usd_);
  }
  price_usd_ = price_usd;
  if (price_usd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.Product.price_usd)
}
inline ::hipstershop::Money* Product::release_price_usd() {
  
  ::hipstershop::Money* temp = price_usd_;
  price_usd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Money* Product::unsafe_arena_release_price_usd() {
  // @@protoc_insertion_point(field_release:hipstershop.Product.price_usd)
  
  ::hipstershop::Money* temp = price_usd_;
  price_usd_ = nullptr;
  return temp;
}
inline ::hipstershop::Money* Product::_internal_mutable_price_usd() {
  
  if (price_usd_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Money>(GetArena());
    price_usd_ = p;
  }
  return price_usd_;
}
inline ::hipstershop::Money* Product::mutable_price_usd() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Product.price_usd)
  return _internal_mutable_price_usd();
}
inline void Product::set_allocated_price_usd(::hipstershop::Money* price_usd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete price_usd_;
  }
  if (price_usd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(price_usd);
    if (message_arena != submessage_arena) {
      price_usd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price_usd, submessage_arena);
    }
    
  } else {
    
  }
  price_usd_ = price_usd;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Product.price_usd)
}

// repeated string categories = 6;
inline int Product::_internal_categories_size() const {
  return categories_.size();
}
inline int Product::categories_size() const {
  return _internal_categories_size();
}
inline void Product::clear_categories() {
  categories_.Clear();
}
inline std::string* Product::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:hipstershop.Product.categories)
  return _internal_add_categories();
}
inline const std::string& Product::_internal_categories(int index) const {
  return categories_.Get(index);
}
inline const std::string& Product::categories(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.Product.categories)
  return _internal_categories(index);
}
inline std::string* Product::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.Product.categories)
  return categories_.Mutable(index);
}
inline void Product::set_categories(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hipstershop.Product.categories)
  categories_.Mutable(index)->assign(value);
}
inline void Product::set_categories(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hipstershop.Product.categories)
  categories_.Mutable(index)->assign(std::move(value));
}
inline void Product::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hipstershop.Product.categories)
}
inline void Product::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Product.categories)
}
inline std::string* Product::_internal_add_categories() {
  return categories_.Add();
}
inline void Product::add_categories(const std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hipstershop.Product.categories)
}
inline void Product::add_categories(std::string&& value) {
  categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hipstershop.Product.categories)
}
inline void Product::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hipstershop.Product.categories)
}
inline void Product::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hipstershop.Product.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Product::categories() const {
  // @@protoc_insertion_point(field_list:hipstershop.Product.categories)
  return categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Product::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.Product.categories)
  return &categories_;
}

// -------------------------------------------------------------------

// ListProductsResponse

// repeated .hipstershop.Product products = 1;
inline int ListProductsResponse::_internal_products_size() const {
  return products_.size();
}
inline int ListProductsResponse::products_size() const {
  return _internal_products_size();
}
inline void ListProductsResponse::clear_products() {
  products_.Clear();
}
inline ::hipstershop::Product* ListProductsResponse::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.ListProductsResponse.products)
  return products_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product >*
ListProductsResponse::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.ListProductsResponse.products)
  return &products_;
}
inline const ::hipstershop::Product& ListProductsResponse::_internal_products(int index) const {
  return products_.Get(index);
}
inline const ::hipstershop::Product& ListProductsResponse::products(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.ListProductsResponse.products)
  return _internal_products(index);
}
inline ::hipstershop::Product* ListProductsResponse::_internal_add_products() {
  return products_.Add();
}
inline ::hipstershop::Product* ListProductsResponse::add_products() {
  // @@protoc_insertion_point(field_add:hipstershop.ListProductsResponse.products)
  return _internal_add_products();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product >&
ListProductsResponse::products() const {
  // @@protoc_insertion_point(field_list:hipstershop.ListProductsResponse.products)
  return products_;
}

// -------------------------------------------------------------------

// GetProductRequest

// string id = 1;
inline void GetProductRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetProductRequest::id() const {
  // @@protoc_insertion_point(field_get:hipstershop.GetProductRequest.id)
  return _internal_id();
}
inline void GetProductRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.GetProductRequest.id)
}
inline std::string* GetProductRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.GetProductRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetProductRequest::_internal_id() const {
  return id_.Get();
}
inline void GetProductRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetProductRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.GetProductRequest.id)
}
inline void GetProductRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.GetProductRequest.id)
}
inline void GetProductRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.GetProductRequest.id)
}
inline std::string* GetProductRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetProductRequest::release_id() {
  // @@protoc_insertion_point(field_release:hipstershop.GetProductRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetProductRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.GetProductRequest.id)
}

// -------------------------------------------------------------------

// SearchProductsRequest

// string query = 1;
inline void SearchProductsRequest::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchProductsRequest::query() const {
  // @@protoc_insertion_point(field_get:hipstershop.SearchProductsRequest.query)
  return _internal_query();
}
inline void SearchProductsRequest::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:hipstershop.SearchProductsRequest.query)
}
inline std::string* SearchProductsRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:hipstershop.SearchProductsRequest.query)
  return _internal_mutable_query();
}
inline const std::string& SearchProductsRequest::_internal_query() const {
  return query_.Get();
}
inline void SearchProductsRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchProductsRequest::set_query(std::string&& value) {
  
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.SearchProductsRequest.query)
}
inline void SearchProductsRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.SearchProductsRequest.query)
}
inline void SearchProductsRequest::set_query(const char* value,
    size_t size) {
  
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.SearchProductsRequest.query)
}
inline std::string* SearchProductsRequest::_internal_mutable_query() {
  
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchProductsRequest::release_query() {
  // @@protoc_insertion_point(field_release:hipstershop.SearchProductsRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchProductsRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.SearchProductsRequest.query)
}

// -------------------------------------------------------------------

// SearchProductsResponse

// repeated .hipstershop.Product results = 1;
inline int SearchProductsResponse::_internal_results_size() const {
  return results_.size();
}
inline int SearchProductsResponse::results_size() const {
  return _internal_results_size();
}
inline void SearchProductsResponse::clear_results() {
  results_.Clear();
}
inline ::hipstershop::Product* SearchProductsResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.SearchProductsResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product >*
SearchProductsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.SearchProductsResponse.results)
  return &results_;
}
inline const ::hipstershop::Product& SearchProductsResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::hipstershop::Product& SearchProductsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.SearchProductsResponse.results)
  return _internal_results(index);
}
inline ::hipstershop::Product* SearchProductsResponse::_internal_add_results() {
  return results_.Add();
}
inline ::hipstershop::Product* SearchProductsResponse::add_results() {
  // @@protoc_insertion_point(field_add:hipstershop.SearchProductsResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Product >&
SearchProductsResponse::results() const {
  // @@protoc_insertion_point(field_list:hipstershop.SearchProductsResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// GetQuoteRequest

// .hipstershop.Address address = 1;
inline bool GetQuoteRequest::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool GetQuoteRequest::has_address() const {
  return _internal_has_address();
}
inline void GetQuoteRequest::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::hipstershop::Address& GetQuoteRequest::_internal_address() const {
  const ::hipstershop::Address* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Address&>(
      ::hipstershop::_Address_default_instance_);
}
inline const ::hipstershop::Address& GetQuoteRequest::address() const {
  // @@protoc_insertion_point(field_get:hipstershop.GetQuoteRequest.address)
  return _internal_address();
}
inline void GetQuoteRequest::unsafe_arena_set_allocated_address(
    ::hipstershop::Address* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.GetQuoteRequest.address)
}
inline ::hipstershop::Address* GetQuoteRequest::release_address() {
  
  ::hipstershop::Address* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Address* GetQuoteRequest::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:hipstershop.GetQuoteRequest.address)
  
  ::hipstershop::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::hipstershop::Address* GetQuoteRequest::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Address>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::hipstershop::Address* GetQuoteRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:hipstershop.GetQuoteRequest.address)
  return _internal_mutable_address();
}
inline void GetQuoteRequest::set_allocated_address(::hipstershop::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.GetQuoteRequest.address)
}

// repeated .hipstershop.CartItem items = 2;
inline int GetQuoteRequest::_internal_items_size() const {
  return items_.size();
}
inline int GetQuoteRequest::items_size() const {
  return _internal_items_size();
}
inline void GetQuoteRequest::clear_items() {
  items_.Clear();
}
inline ::hipstershop::CartItem* GetQuoteRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.GetQuoteRequest.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >*
GetQuoteRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.GetQuoteRequest.items)
  return &items_;
}
inline const ::hipstershop::CartItem& GetQuoteRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::hipstershop::CartItem& GetQuoteRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.GetQuoteRequest.items)
  return _internal_items(index);
}
inline ::hipstershop::CartItem* GetQuoteRequest::_internal_add_items() {
  return items_.Add();
}
inline ::hipstershop::CartItem* GetQuoteRequest::add_items() {
  // @@protoc_insertion_point(field_add:hipstershop.GetQuoteRequest.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >&
GetQuoteRequest::items() const {
  // @@protoc_insertion_point(field_list:hipstershop.GetQuoteRequest.items)
  return items_;
}

// -------------------------------------------------------------------

// GetQuoteResponse

// .hipstershop.Money cost_usd = 1;
inline bool GetQuoteResponse::_internal_has_cost_usd() const {
  return this != internal_default_instance() && cost_usd_ != nullptr;
}
inline bool GetQuoteResponse::has_cost_usd() const {
  return _internal_has_cost_usd();
}
inline void GetQuoteResponse::clear_cost_usd() {
  if (GetArena() == nullptr && cost_usd_ != nullptr) {
    delete cost_usd_;
  }
  cost_usd_ = nullptr;
}
inline const ::hipstershop::Money& GetQuoteResponse::_internal_cost_usd() const {
  const ::hipstershop::Money* p = cost_usd_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Money&>(
      ::hipstershop::_Money_default_instance_);
}
inline const ::hipstershop::Money& GetQuoteResponse::cost_usd() const {
  // @@protoc_insertion_point(field_get:hipstershop.GetQuoteResponse.cost_usd)
  return _internal_cost_usd();
}
inline void GetQuoteResponse::unsafe_arena_set_allocated_cost_usd(
    ::hipstershop::Money* cost_usd) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_usd_);
  }
  cost_usd_ = cost_usd;
  if (cost_usd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.GetQuoteResponse.cost_usd)
}
inline ::hipstershop::Money* GetQuoteResponse::release_cost_usd() {
  
  ::hipstershop::Money* temp = cost_usd_;
  cost_usd_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Money* GetQuoteResponse::unsafe_arena_release_cost_usd() {
  // @@protoc_insertion_point(field_release:hipstershop.GetQuoteResponse.cost_usd)
  
  ::hipstershop::Money* temp = cost_usd_;
  cost_usd_ = nullptr;
  return temp;
}
inline ::hipstershop::Money* GetQuoteResponse::_internal_mutable_cost_usd() {
  
  if (cost_usd_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Money>(GetArena());
    cost_usd_ = p;
  }
  return cost_usd_;
}
inline ::hipstershop::Money* GetQuoteResponse::mutable_cost_usd() {
  // @@protoc_insertion_point(field_mutable:hipstershop.GetQuoteResponse.cost_usd)
  return _internal_mutable_cost_usd();
}
inline void GetQuoteResponse::set_allocated_cost_usd(::hipstershop::Money* cost_usd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cost_usd_;
  }
  if (cost_usd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cost_usd);
    if (message_arena != submessage_arena) {
      cost_usd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost_usd, submessage_arena);
    }
    
  } else {
    
  }
  cost_usd_ = cost_usd;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.GetQuoteResponse.cost_usd)
}

// -------------------------------------------------------------------

// ShipOrderRequest

// .hipstershop.Address address = 1;
inline bool ShipOrderRequest::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool ShipOrderRequest::has_address() const {
  return _internal_has_address();
}
inline void ShipOrderRequest::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::hipstershop::Address& ShipOrderRequest::_internal_address() const {
  const ::hipstershop::Address* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Address&>(
      ::hipstershop::_Address_default_instance_);
}
inline const ::hipstershop::Address& ShipOrderRequest::address() const {
  // @@protoc_insertion_point(field_get:hipstershop.ShipOrderRequest.address)
  return _internal_address();
}
inline void ShipOrderRequest::unsafe_arena_set_allocated_address(
    ::hipstershop::Address* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.ShipOrderRequest.address)
}
inline ::hipstershop::Address* ShipOrderRequest::release_address() {
  
  ::hipstershop::Address* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Address* ShipOrderRequest::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:hipstershop.ShipOrderRequest.address)
  
  ::hipstershop::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::hipstershop::Address* ShipOrderRequest::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Address>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::hipstershop::Address* ShipOrderRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:hipstershop.ShipOrderRequest.address)
  return _internal_mutable_address();
}
inline void ShipOrderRequest::set_allocated_address(::hipstershop::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.ShipOrderRequest.address)
}

// repeated .hipstershop.CartItem items = 2;
inline int ShipOrderRequest::_internal_items_size() const {
  return items_.size();
}
inline int ShipOrderRequest::items_size() const {
  return _internal_items_size();
}
inline void ShipOrderRequest::clear_items() {
  items_.Clear();
}
inline ::hipstershop::CartItem* ShipOrderRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.ShipOrderRequest.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >*
ShipOrderRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.ShipOrderRequest.items)
  return &items_;
}
inline const ::hipstershop::CartItem& ShipOrderRequest::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::hipstershop::CartItem& ShipOrderRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.ShipOrderRequest.items)
  return _internal_items(index);
}
inline ::hipstershop::CartItem* ShipOrderRequest::_internal_add_items() {
  return items_.Add();
}
inline ::hipstershop::CartItem* ShipOrderRequest::add_items() {
  // @@protoc_insertion_point(field_add:hipstershop.ShipOrderRequest.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::CartItem >&
ShipOrderRequest::items() const {
  // @@protoc_insertion_point(field_list:hipstershop.ShipOrderRequest.items)
  return items_;
}

// -------------------------------------------------------------------

// ShipOrderResponse

// string tracking_id = 1;
inline void ShipOrderResponse::clear_tracking_id() {
  tracking_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShipOrderResponse::tracking_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.ShipOrderResponse.tracking_id)
  return _internal_tracking_id();
}
inline void ShipOrderResponse::set_tracking_id(const std::string& value) {
  _internal_set_tracking_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.ShipOrderResponse.tracking_id)
}
inline std::string* ShipOrderResponse::mutable_tracking_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.ShipOrderResponse.tracking_id)
  return _internal_mutable_tracking_id();
}
inline const std::string& ShipOrderResponse::_internal_tracking_id() const {
  return tracking_id_.Get();
}
inline void ShipOrderResponse::_internal_set_tracking_id(const std::string& value) {
  
  tracking_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShipOrderResponse::set_tracking_id(std::string&& value) {
  
  tracking_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.ShipOrderResponse.tracking_id)
}
inline void ShipOrderResponse::set_tracking_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tracking_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.ShipOrderResponse.tracking_id)
}
inline void ShipOrderResponse::set_tracking_id(const char* value,
    size_t size) {
  
  tracking_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.ShipOrderResponse.tracking_id)
}
inline std::string* ShipOrderResponse::_internal_mutable_tracking_id() {
  
  return tracking_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShipOrderResponse::release_tracking_id() {
  // @@protoc_insertion_point(field_release:hipstershop.ShipOrderResponse.tracking_id)
  return tracking_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShipOrderResponse::set_allocated_tracking_id(std::string* tracking_id) {
  if (tracking_id != nullptr) {
    
  } else {
    
  }
  tracking_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tracking_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.ShipOrderResponse.tracking_id)
}

// -------------------------------------------------------------------

// Address

// string street_address = 1;
inline void Address::clear_street_address() {
  street_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::street_address() const {
  // @@protoc_insertion_point(field_get:hipstershop.Address.street_address)
  return _internal_street_address();
}
inline void Address::set_street_address(const std::string& value) {
  _internal_set_street_address(value);
  // @@protoc_insertion_point(field_set:hipstershop.Address.street_address)
}
inline std::string* Address::mutable_street_address() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Address.street_address)
  return _internal_mutable_street_address();
}
inline const std::string& Address::_internal_street_address() const {
  return street_address_.Get();
}
inline void Address::_internal_set_street_address(const std::string& value) {
  
  street_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_street_address(std::string&& value) {
  
  street_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Address.street_address)
}
inline void Address::set_street_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Address.street_address)
}
inline void Address::set_street_address(const char* value,
    size_t size) {
  
  street_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Address.street_address)
}
inline std::string* Address::_internal_mutable_street_address() {
  
  return street_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_street_address() {
  // @@protoc_insertion_point(field_release:hipstershop.Address.street_address)
  return street_address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_street_address(std::string* street_address) {
  if (street_address != nullptr) {
    
  } else {
    
  }
  street_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Address.street_address)
}

// string city = 2;
inline void Address::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:hipstershop.Address.city)
  return _internal_city();
}
inline void Address::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:hipstershop.Address.city)
}
inline std::string* Address::mutable_city() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Address.city)
  return _internal_mutable_city();
}
inline const std::string& Address::_internal_city() const {
  return city_.Get();
}
inline void Address::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Address.city)
}
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Address.city)
}
inline void Address::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Address.city)
}
inline std::string* Address::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:hipstershop.Address.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Address.city)
}

// string state = 3;
inline void Address::clear_state() {
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::state() const {
  // @@protoc_insertion_point(field_get:hipstershop.Address.state)
  return _internal_state();
}
inline void Address::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:hipstershop.Address.state)
}
inline std::string* Address::mutable_state() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Address.state)
  return _internal_mutable_state();
}
inline const std::string& Address::_internal_state() const {
  return state_.Get();
}
inline void Address::_internal_set_state(const std::string& value) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_state(std::string&& value) {
  
  state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Address.state)
}
inline void Address::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Address.state)
}
inline void Address::set_state(const char* value,
    size_t size) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Address.state)
}
inline std::string* Address::_internal_mutable_state() {
  
  return state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_state() {
  // @@protoc_insertion_point(field_release:hipstershop.Address.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Address.state)
}

// string country = 4;
inline void Address::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::country() const {
  // @@protoc_insertion_point(field_get:hipstershop.Address.country)
  return _internal_country();
}
inline void Address::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:hipstershop.Address.country)
}
inline std::string* Address::mutable_country() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Address.country)
  return _internal_mutable_country();
}
inline const std::string& Address::_internal_country() const {
  return country_.Get();
}
inline void Address::_internal_set_country(const std::string& value) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_country(std::string&& value) {
  
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Address.country)
}
inline void Address::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Address.country)
}
inline void Address::set_country(const char* value,
    size_t size) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Address.country)
}
inline std::string* Address::_internal_mutable_country() {
  
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_country() {
  // @@protoc_insertion_point(field_release:hipstershop.Address.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Address.country)
}

// int32 zip_code = 5;
inline void Address::clear_zip_code() {
  zip_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address::_internal_zip_code() const {
  return zip_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address::zip_code() const {
  // @@protoc_insertion_point(field_get:hipstershop.Address.zip_code)
  return _internal_zip_code();
}
inline void Address::_internal_set_zip_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zip_code_ = value;
}
inline void Address::set_zip_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zip_code(value);
  // @@protoc_insertion_point(field_set:hipstershop.Address.zip_code)
}

// -------------------------------------------------------------------

// Money

// string currency_code = 1;
inline void Money::clear_currency_code() {
  currency_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Money::currency_code() const {
  // @@protoc_insertion_point(field_get:hipstershop.Money.currency_code)
  return _internal_currency_code();
}
inline void Money::set_currency_code(const std::string& value) {
  _internal_set_currency_code(value);
  // @@protoc_insertion_point(field_set:hipstershop.Money.currency_code)
}
inline std::string* Money::mutable_currency_code() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Money.currency_code)
  return _internal_mutable_currency_code();
}
inline const std::string& Money::_internal_currency_code() const {
  return currency_code_.Get();
}
inline void Money::_internal_set_currency_code(const std::string& value) {
  
  currency_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Money::set_currency_code(std::string&& value) {
  
  currency_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Money.currency_code)
}
inline void Money::set_currency_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Money.currency_code)
}
inline void Money::set_currency_code(const char* value,
    size_t size) {
  
  currency_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Money.currency_code)
}
inline std::string* Money::_internal_mutable_currency_code() {
  
  return currency_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Money::release_currency_code() {
  // @@protoc_insertion_point(field_release:hipstershop.Money.currency_code)
  return currency_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Money::set_allocated_currency_code(std::string* currency_code) {
  if (currency_code != nullptr) {
    
  } else {
    
  }
  currency_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Money.currency_code)
}

// int64 units = 2;
inline void Money::clear_units() {
  units_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Money::_internal_units() const {
  return units_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Money::units() const {
  // @@protoc_insertion_point(field_get:hipstershop.Money.units)
  return _internal_units();
}
inline void Money::_internal_set_units(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  units_ = value;
}
inline void Money::set_units(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_units(value);
  // @@protoc_insertion_point(field_set:hipstershop.Money.units)
}

// int32 nanos = 3;
inline void Money::clear_nanos() {
  nanos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Money::_internal_nanos() const {
  return nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Money::nanos() const {
  // @@protoc_insertion_point(field_get:hipstershop.Money.nanos)
  return _internal_nanos();
}
inline void Money::_internal_set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nanos_ = value;
}
inline void Money::set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:hipstershop.Money.nanos)
}

// -------------------------------------------------------------------

// GetSupportedCurrenciesResponse

// repeated string currency_codes = 1;
inline int GetSupportedCurrenciesResponse::_internal_currency_codes_size() const {
  return currency_codes_.size();
}
inline int GetSupportedCurrenciesResponse::currency_codes_size() const {
  return _internal_currency_codes_size();
}
inline void GetSupportedCurrenciesResponse::clear_currency_codes() {
  currency_codes_.Clear();
}
inline std::string* GetSupportedCurrenciesResponse::add_currency_codes() {
  // @@protoc_insertion_point(field_add_mutable:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
  return _internal_add_currency_codes();
}
inline const std::string& GetSupportedCurrenciesResponse::_internal_currency_codes(int index) const {
  return currency_codes_.Get(index);
}
inline const std::string& GetSupportedCurrenciesResponse::currency_codes(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
  return _internal_currency_codes(index);
}
inline std::string* GetSupportedCurrenciesResponse::mutable_currency_codes(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
  return currency_codes_.Mutable(index);
}
inline void GetSupportedCurrenciesResponse::set_currency_codes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
  currency_codes_.Mutable(index)->assign(value);
}
inline void GetSupportedCurrenciesResponse::set_currency_codes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
  currency_codes_.Mutable(index)->assign(std::move(value));
}
inline void GetSupportedCurrenciesResponse::set_currency_codes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  currency_codes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
}
inline void GetSupportedCurrenciesResponse::set_currency_codes(int index, const char* value, size_t size) {
  currency_codes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
}
inline std::string* GetSupportedCurrenciesResponse::_internal_add_currency_codes() {
  return currency_codes_.Add();
}
inline void GetSupportedCurrenciesResponse::add_currency_codes(const std::string& value) {
  currency_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
}
inline void GetSupportedCurrenciesResponse::add_currency_codes(std::string&& value) {
  currency_codes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
}
inline void GetSupportedCurrenciesResponse::add_currency_codes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  currency_codes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
}
inline void GetSupportedCurrenciesResponse::add_currency_codes(const char* value, size_t size) {
  currency_codes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetSupportedCurrenciesResponse::currency_codes() const {
  // @@protoc_insertion_point(field_list:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
  return currency_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetSupportedCurrenciesResponse::mutable_currency_codes() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.GetSupportedCurrenciesResponse.currency_codes)
  return &currency_codes_;
}

// -------------------------------------------------------------------

// CurrencyConversionRequest

// .hipstershop.Money from = 1;
inline bool CurrencyConversionRequest::_internal_has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline bool CurrencyConversionRequest::has_from() const {
  return _internal_has_from();
}
inline void CurrencyConversionRequest::clear_from() {
  if (GetArena() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
inline const ::hipstershop::Money& CurrencyConversionRequest::_internal_from() const {
  const ::hipstershop::Money* p = from_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Money&>(
      ::hipstershop::_Money_default_instance_);
}
inline const ::hipstershop::Money& CurrencyConversionRequest::from() const {
  // @@protoc_insertion_point(field_get:hipstershop.CurrencyConversionRequest.from)
  return _internal_from();
}
inline void CurrencyConversionRequest::unsafe_arena_set_allocated_from(
    ::hipstershop::Money* from) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  from_ = from;
  if (from) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.CurrencyConversionRequest.from)
}
inline ::hipstershop::Money* CurrencyConversionRequest::release_from() {
  
  ::hipstershop::Money* temp = from_;
  from_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Money* CurrencyConversionRequest::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_release:hipstershop.CurrencyConversionRequest.from)
  
  ::hipstershop::Money* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::hipstershop::Money* CurrencyConversionRequest::_internal_mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Money>(GetArena());
    from_ = p;
  }
  return from_;
}
inline ::hipstershop::Money* CurrencyConversionRequest::mutable_from() {
  // @@protoc_insertion_point(field_mutable:hipstershop.CurrencyConversionRequest.from)
  return _internal_mutable_from();
}
inline void CurrencyConversionRequest::set_allocated_from(::hipstershop::Money* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(from);
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.CurrencyConversionRequest.from)
}

// string to_code = 2;
inline void CurrencyConversionRequest::clear_to_code() {
  to_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CurrencyConversionRequest::to_code() const {
  // @@protoc_insertion_point(field_get:hipstershop.CurrencyConversionRequest.to_code)
  return _internal_to_code();
}
inline void CurrencyConversionRequest::set_to_code(const std::string& value) {
  _internal_set_to_code(value);
  // @@protoc_insertion_point(field_set:hipstershop.CurrencyConversionRequest.to_code)
}
inline std::string* CurrencyConversionRequest::mutable_to_code() {
  // @@protoc_insertion_point(field_mutable:hipstershop.CurrencyConversionRequest.to_code)
  return _internal_mutable_to_code();
}
inline const std::string& CurrencyConversionRequest::_internal_to_code() const {
  return to_code_.Get();
}
inline void CurrencyConversionRequest::_internal_set_to_code(const std::string& value) {
  
  to_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CurrencyConversionRequest::set_to_code(std::string&& value) {
  
  to_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.CurrencyConversionRequest.to_code)
}
inline void CurrencyConversionRequest::set_to_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.CurrencyConversionRequest.to_code)
}
inline void CurrencyConversionRequest::set_to_code(const char* value,
    size_t size) {
  
  to_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.CurrencyConversionRequest.to_code)
}
inline std::string* CurrencyConversionRequest::_internal_mutable_to_code() {
  
  return to_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CurrencyConversionRequest::release_to_code() {
  // @@protoc_insertion_point(field_release:hipstershop.CurrencyConversionRequest.to_code)
  return to_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CurrencyConversionRequest::set_allocated_to_code(std::string* to_code) {
  if (to_code != nullptr) {
    
  } else {
    
  }
  to_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.CurrencyConversionRequest.to_code)
}

// -------------------------------------------------------------------

// CreditCardInfo

// string credit_card_number = 1;
inline void CreditCardInfo::clear_credit_card_number() {
  credit_card_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreditCardInfo::credit_card_number() const {
  // @@protoc_insertion_point(field_get:hipstershop.CreditCardInfo.credit_card_number)
  return _internal_credit_card_number();
}
inline void CreditCardInfo::set_credit_card_number(const std::string& value) {
  _internal_set_credit_card_number(value);
  // @@protoc_insertion_point(field_set:hipstershop.CreditCardInfo.credit_card_number)
}
inline std::string* CreditCardInfo::mutable_credit_card_number() {
  // @@protoc_insertion_point(field_mutable:hipstershop.CreditCardInfo.credit_card_number)
  return _internal_mutable_credit_card_number();
}
inline const std::string& CreditCardInfo::_internal_credit_card_number() const {
  return credit_card_number_.Get();
}
inline void CreditCardInfo::_internal_set_credit_card_number(const std::string& value) {
  
  credit_card_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreditCardInfo::set_credit_card_number(std::string&& value) {
  
  credit_card_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.CreditCardInfo.credit_card_number)
}
inline void CreditCardInfo::set_credit_card_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  credit_card_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.CreditCardInfo.credit_card_number)
}
inline void CreditCardInfo::set_credit_card_number(const char* value,
    size_t size) {
  
  credit_card_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.CreditCardInfo.credit_card_number)
}
inline std::string* CreditCardInfo::_internal_mutable_credit_card_number() {
  
  return credit_card_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreditCardInfo::release_credit_card_number() {
  // @@protoc_insertion_point(field_release:hipstershop.CreditCardInfo.credit_card_number)
  return credit_card_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreditCardInfo::set_allocated_credit_card_number(std::string* credit_card_number) {
  if (credit_card_number != nullptr) {
    
  } else {
    
  }
  credit_card_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), credit_card_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.CreditCardInfo.credit_card_number)
}

// int32 credit_card_cvv = 2;
inline void CreditCardInfo::clear_credit_card_cvv() {
  credit_card_cvv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreditCardInfo::_internal_credit_card_cvv() const {
  return credit_card_cvv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreditCardInfo::credit_card_cvv() const {
  // @@protoc_insertion_point(field_get:hipstershop.CreditCardInfo.credit_card_cvv)
  return _internal_credit_card_cvv();
}
inline void CreditCardInfo::_internal_set_credit_card_cvv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  credit_card_cvv_ = value;
}
inline void CreditCardInfo::set_credit_card_cvv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_credit_card_cvv(value);
  // @@protoc_insertion_point(field_set:hipstershop.CreditCardInfo.credit_card_cvv)
}

// int32 credit_card_expiration_year = 3;
inline void CreditCardInfo::clear_credit_card_expiration_year() {
  credit_card_expiration_year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreditCardInfo::_internal_credit_card_expiration_year() const {
  return credit_card_expiration_year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreditCardInfo::credit_card_expiration_year() const {
  // @@protoc_insertion_point(field_get:hipstershop.CreditCardInfo.credit_card_expiration_year)
  return _internal_credit_card_expiration_year();
}
inline void CreditCardInfo::_internal_set_credit_card_expiration_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  credit_card_expiration_year_ = value;
}
inline void CreditCardInfo::set_credit_card_expiration_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_credit_card_expiration_year(value);
  // @@protoc_insertion_point(field_set:hipstershop.CreditCardInfo.credit_card_expiration_year)
}

// int32 credit_card_expiration_month = 4;
inline void CreditCardInfo::clear_credit_card_expiration_month() {
  credit_card_expiration_month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreditCardInfo::_internal_credit_card_expiration_month() const {
  return credit_card_expiration_month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreditCardInfo::credit_card_expiration_month() const {
  // @@protoc_insertion_point(field_get:hipstershop.CreditCardInfo.credit_card_expiration_month)
  return _internal_credit_card_expiration_month();
}
inline void CreditCardInfo::_internal_set_credit_card_expiration_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  credit_card_expiration_month_ = value;
}
inline void CreditCardInfo::set_credit_card_expiration_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_credit_card_expiration_month(value);
  // @@protoc_insertion_point(field_set:hipstershop.CreditCardInfo.credit_card_expiration_month)
}

// -------------------------------------------------------------------

// ChargeRequest

// .hipstershop.Money amount = 1;
inline bool ChargeRequest::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool ChargeRequest::has_amount() const {
  return _internal_has_amount();
}
inline void ChargeRequest::clear_amount() {
  if (GetArena() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::hipstershop::Money& ChargeRequest::_internal_amount() const {
  const ::hipstershop::Money* p = amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Money&>(
      ::hipstershop::_Money_default_instance_);
}
inline const ::hipstershop::Money& ChargeRequest::amount() const {
  // @@protoc_insertion_point(field_get:hipstershop.ChargeRequest.amount)
  return _internal_amount();
}
inline void ChargeRequest::unsafe_arena_set_allocated_amount(
    ::hipstershop::Money* amount) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  amount_ = amount;
  if (amount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.ChargeRequest.amount)
}
inline ::hipstershop::Money* ChargeRequest::release_amount() {
  
  ::hipstershop::Money* temp = amount_;
  amount_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Money* ChargeRequest::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:hipstershop.ChargeRequest.amount)
  
  ::hipstershop::Money* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::hipstershop::Money* ChargeRequest::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Money>(GetArena());
    amount_ = p;
  }
  return amount_;
}
inline ::hipstershop::Money* ChargeRequest::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:hipstershop.ChargeRequest.amount)
  return _internal_mutable_amount();
}
inline void ChargeRequest::set_allocated_amount(::hipstershop::Money* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(amount);
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.ChargeRequest.amount)
}

// .hipstershop.CreditCardInfo credit_card = 2;
inline bool ChargeRequest::_internal_has_credit_card() const {
  return this != internal_default_instance() && credit_card_ != nullptr;
}
inline bool ChargeRequest::has_credit_card() const {
  return _internal_has_credit_card();
}
inline void ChargeRequest::clear_credit_card() {
  if (GetArena() == nullptr && credit_card_ != nullptr) {
    delete credit_card_;
  }
  credit_card_ = nullptr;
}
inline const ::hipstershop::CreditCardInfo& ChargeRequest::_internal_credit_card() const {
  const ::hipstershop::CreditCardInfo* p = credit_card_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::CreditCardInfo&>(
      ::hipstershop::_CreditCardInfo_default_instance_);
}
inline const ::hipstershop::CreditCardInfo& ChargeRequest::credit_card() const {
  // @@protoc_insertion_point(field_get:hipstershop.ChargeRequest.credit_card)
  return _internal_credit_card();
}
inline void ChargeRequest::unsafe_arena_set_allocated_credit_card(
    ::hipstershop::CreditCardInfo* credit_card) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_card_);
  }
  credit_card_ = credit_card;
  if (credit_card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.ChargeRequest.credit_card)
}
inline ::hipstershop::CreditCardInfo* ChargeRequest::release_credit_card() {
  
  ::hipstershop::CreditCardInfo* temp = credit_card_;
  credit_card_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::CreditCardInfo* ChargeRequest::unsafe_arena_release_credit_card() {
  // @@protoc_insertion_point(field_release:hipstershop.ChargeRequest.credit_card)
  
  ::hipstershop::CreditCardInfo* temp = credit_card_;
  credit_card_ = nullptr;
  return temp;
}
inline ::hipstershop::CreditCardInfo* ChargeRequest::_internal_mutable_credit_card() {
  
  if (credit_card_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::CreditCardInfo>(GetArena());
    credit_card_ = p;
  }
  return credit_card_;
}
inline ::hipstershop::CreditCardInfo* ChargeRequest::mutable_credit_card() {
  // @@protoc_insertion_point(field_mutable:hipstershop.ChargeRequest.credit_card)
  return _internal_mutable_credit_card();
}
inline void ChargeRequest::set_allocated_credit_card(::hipstershop::CreditCardInfo* credit_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete credit_card_;
  }
  if (credit_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(credit_card);
    if (message_arena != submessage_arena) {
      credit_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_card, submessage_arena);
    }
    
  } else {
    
  }
  credit_card_ = credit_card;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.ChargeRequest.credit_card)
}

// -------------------------------------------------------------------

// ChargeResponse

// string transaction_id = 1;
inline void ChargeResponse::clear_transaction_id() {
  transaction_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ChargeResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.ChargeResponse.transaction_id)
  return _internal_transaction_id();
}
inline void ChargeResponse::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.ChargeResponse.transaction_id)
}
inline std::string* ChargeResponse::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.ChargeResponse.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& ChargeResponse::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void ChargeResponse::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ChargeResponse::set_transaction_id(std::string&& value) {
  
  transaction_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.ChargeResponse.transaction_id)
}
inline void ChargeResponse::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.ChargeResponse.transaction_id)
}
inline void ChargeResponse::set_transaction_id(const char* value,
    size_t size) {
  
  transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.ChargeResponse.transaction_id)
}
inline std::string* ChargeResponse::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ChargeResponse::release_transaction_id() {
  // @@protoc_insertion_point(field_release:hipstershop.ChargeResponse.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChargeResponse::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.ChargeResponse.transaction_id)
}

// -------------------------------------------------------------------

// OrderItem

// .hipstershop.CartItem item = 1;
inline bool OrderItem::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool OrderItem::has_item() const {
  return _internal_has_item();
}
inline void OrderItem::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::hipstershop::CartItem& OrderItem::_internal_item() const {
  const ::hipstershop::CartItem* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::CartItem&>(
      ::hipstershop::_CartItem_default_instance_);
}
inline const ::hipstershop::CartItem& OrderItem::item() const {
  // @@protoc_insertion_point(field_get:hipstershop.OrderItem.item)
  return _internal_item();
}
inline void OrderItem::unsafe_arena_set_allocated_item(
    ::hipstershop::CartItem* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.OrderItem.item)
}
inline ::hipstershop::CartItem* OrderItem::release_item() {
  
  ::hipstershop::CartItem* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::CartItem* OrderItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:hipstershop.OrderItem.item)
  
  ::hipstershop::CartItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::hipstershop::CartItem* OrderItem::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::CartItem>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::hipstershop::CartItem* OrderItem::mutable_item() {
  // @@protoc_insertion_point(field_mutable:hipstershop.OrderItem.item)
  return _internal_mutable_item();
}
inline void OrderItem::set_allocated_item(::hipstershop::CartItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.OrderItem.item)
}

// .hipstershop.Money cost = 2;
inline bool OrderItem::_internal_has_cost() const {
  return this != internal_default_instance() && cost_ != nullptr;
}
inline bool OrderItem::has_cost() const {
  return _internal_has_cost();
}
inline void OrderItem::clear_cost() {
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
}
inline const ::hipstershop::Money& OrderItem::_internal_cost() const {
  const ::hipstershop::Money* p = cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Money&>(
      ::hipstershop::_Money_default_instance_);
}
inline const ::hipstershop::Money& OrderItem::cost() const {
  // @@protoc_insertion_point(field_get:hipstershop.OrderItem.cost)
  return _internal_cost();
}
inline void OrderItem::unsafe_arena_set_allocated_cost(
    ::hipstershop::Money* cost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  cost_ = cost;
  if (cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.OrderItem.cost)
}
inline ::hipstershop::Money* OrderItem::release_cost() {
  
  ::hipstershop::Money* temp = cost_;
  cost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Money* OrderItem::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_release:hipstershop.OrderItem.cost)
  
  ::hipstershop::Money* temp = cost_;
  cost_ = nullptr;
  return temp;
}
inline ::hipstershop::Money* OrderItem::_internal_mutable_cost() {
  
  if (cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Money>(GetArena());
    cost_ = p;
  }
  return cost_;
}
inline ::hipstershop::Money* OrderItem::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:hipstershop.OrderItem.cost)
  return _internal_mutable_cost();
}
inline void OrderItem::set_allocated_cost(::hipstershop::Money* cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cost_;
  }
  if (cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cost);
    if (message_arena != submessage_arena) {
      cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost, submessage_arena);
    }
    
  } else {
    
  }
  cost_ = cost;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.OrderItem.cost)
}

// -------------------------------------------------------------------

// OrderResult

// string order_id = 1;
inline void OrderResult::clear_order_id() {
  order_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderResult::order_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.OrderResult.order_id)
  return _internal_order_id();
}
inline void OrderResult::set_order_id(const std::string& value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.OrderResult.order_id)
}
inline std::string* OrderResult::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.OrderResult.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& OrderResult::_internal_order_id() const {
  return order_id_.Get();
}
inline void OrderResult::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderResult::set_order_id(std::string&& value) {
  
  order_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.OrderResult.order_id)
}
inline void OrderResult::set_order_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.OrderResult.order_id)
}
inline void OrderResult::set_order_id(const char* value,
    size_t size) {
  
  order_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.OrderResult.order_id)
}
inline std::string* OrderResult::_internal_mutable_order_id() {
  
  return order_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderResult::release_order_id() {
  // @@protoc_insertion_point(field_release:hipstershop.OrderResult.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderResult::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.OrderResult.order_id)
}

// string shipping_tracking_id = 2;
inline void OrderResult::clear_shipping_tracking_id() {
  shipping_tracking_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OrderResult::shipping_tracking_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.OrderResult.shipping_tracking_id)
  return _internal_shipping_tracking_id();
}
inline void OrderResult::set_shipping_tracking_id(const std::string& value) {
  _internal_set_shipping_tracking_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.OrderResult.shipping_tracking_id)
}
inline std::string* OrderResult::mutable_shipping_tracking_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.OrderResult.shipping_tracking_id)
  return _internal_mutable_shipping_tracking_id();
}
inline const std::string& OrderResult::_internal_shipping_tracking_id() const {
  return shipping_tracking_id_.Get();
}
inline void OrderResult::_internal_set_shipping_tracking_id(const std::string& value) {
  
  shipping_tracking_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OrderResult::set_shipping_tracking_id(std::string&& value) {
  
  shipping_tracking_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.OrderResult.shipping_tracking_id)
}
inline void OrderResult::set_shipping_tracking_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  shipping_tracking_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.OrderResult.shipping_tracking_id)
}
inline void OrderResult::set_shipping_tracking_id(const char* value,
    size_t size) {
  
  shipping_tracking_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.OrderResult.shipping_tracking_id)
}
inline std::string* OrderResult::_internal_mutable_shipping_tracking_id() {
  
  return shipping_tracking_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OrderResult::release_shipping_tracking_id() {
  // @@protoc_insertion_point(field_release:hipstershop.OrderResult.shipping_tracking_id)
  return shipping_tracking_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OrderResult::set_allocated_shipping_tracking_id(std::string* shipping_tracking_id) {
  if (shipping_tracking_id != nullptr) {
    
  } else {
    
  }
  shipping_tracking_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shipping_tracking_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.OrderResult.shipping_tracking_id)
}

// .hipstershop.Money shipping_cost = 3;
inline bool OrderResult::_internal_has_shipping_cost() const {
  return this != internal_default_instance() && shipping_cost_ != nullptr;
}
inline bool OrderResult::has_shipping_cost() const {
  return _internal_has_shipping_cost();
}
inline void OrderResult::clear_shipping_cost() {
  if (GetArena() == nullptr && shipping_cost_ != nullptr) {
    delete shipping_cost_;
  }
  shipping_cost_ = nullptr;
}
inline const ::hipstershop::Money& OrderResult::_internal_shipping_cost() const {
  const ::hipstershop::Money* p = shipping_cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Money&>(
      ::hipstershop::_Money_default_instance_);
}
inline const ::hipstershop::Money& OrderResult::shipping_cost() const {
  // @@protoc_insertion_point(field_get:hipstershop.OrderResult.shipping_cost)
  return _internal_shipping_cost();
}
inline void OrderResult::unsafe_arena_set_allocated_shipping_cost(
    ::hipstershop::Money* shipping_cost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shipping_cost_);
  }
  shipping_cost_ = shipping_cost;
  if (shipping_cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.OrderResult.shipping_cost)
}
inline ::hipstershop::Money* OrderResult::release_shipping_cost() {
  
  ::hipstershop::Money* temp = shipping_cost_;
  shipping_cost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Money* OrderResult::unsafe_arena_release_shipping_cost() {
  // @@protoc_insertion_point(field_release:hipstershop.OrderResult.shipping_cost)
  
  ::hipstershop::Money* temp = shipping_cost_;
  shipping_cost_ = nullptr;
  return temp;
}
inline ::hipstershop::Money* OrderResult::_internal_mutable_shipping_cost() {
  
  if (shipping_cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Money>(GetArena());
    shipping_cost_ = p;
  }
  return shipping_cost_;
}
inline ::hipstershop::Money* OrderResult::mutable_shipping_cost() {
  // @@protoc_insertion_point(field_mutable:hipstershop.OrderResult.shipping_cost)
  return _internal_mutable_shipping_cost();
}
inline void OrderResult::set_allocated_shipping_cost(::hipstershop::Money* shipping_cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shipping_cost_;
  }
  if (shipping_cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shipping_cost);
    if (message_arena != submessage_arena) {
      shipping_cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shipping_cost, submessage_arena);
    }
    
  } else {
    
  }
  shipping_cost_ = shipping_cost;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.OrderResult.shipping_cost)
}

// .hipstershop.Address shipping_address = 4;
inline bool OrderResult::_internal_has_shipping_address() const {
  return this != internal_default_instance() && shipping_address_ != nullptr;
}
inline bool OrderResult::has_shipping_address() const {
  return _internal_has_shipping_address();
}
inline void OrderResult::clear_shipping_address() {
  if (GetArena() == nullptr && shipping_address_ != nullptr) {
    delete shipping_address_;
  }
  shipping_address_ = nullptr;
}
inline const ::hipstershop::Address& OrderResult::_internal_shipping_address() const {
  const ::hipstershop::Address* p = shipping_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Address&>(
      ::hipstershop::_Address_default_instance_);
}
inline const ::hipstershop::Address& OrderResult::shipping_address() const {
  // @@protoc_insertion_point(field_get:hipstershop.OrderResult.shipping_address)
  return _internal_shipping_address();
}
inline void OrderResult::unsafe_arena_set_allocated_shipping_address(
    ::hipstershop::Address* shipping_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shipping_address_);
  }
  shipping_address_ = shipping_address;
  if (shipping_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.OrderResult.shipping_address)
}
inline ::hipstershop::Address* OrderResult::release_shipping_address() {
  
  ::hipstershop::Address* temp = shipping_address_;
  shipping_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Address* OrderResult::unsafe_arena_release_shipping_address() {
  // @@protoc_insertion_point(field_release:hipstershop.OrderResult.shipping_address)
  
  ::hipstershop::Address* temp = shipping_address_;
  shipping_address_ = nullptr;
  return temp;
}
inline ::hipstershop::Address* OrderResult::_internal_mutable_shipping_address() {
  
  if (shipping_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Address>(GetArena());
    shipping_address_ = p;
  }
  return shipping_address_;
}
inline ::hipstershop::Address* OrderResult::mutable_shipping_address() {
  // @@protoc_insertion_point(field_mutable:hipstershop.OrderResult.shipping_address)
  return _internal_mutable_shipping_address();
}
inline void OrderResult::set_allocated_shipping_address(::hipstershop::Address* shipping_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shipping_address_;
  }
  if (shipping_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shipping_address);
    if (message_arena != submessage_arena) {
      shipping_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shipping_address, submessage_arena);
    }
    
  } else {
    
  }
  shipping_address_ = shipping_address;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.OrderResult.shipping_address)
}

// repeated .hipstershop.OrderItem items = 5;
inline int OrderResult::_internal_items_size() const {
  return items_.size();
}
inline int OrderResult::items_size() const {
  return _internal_items_size();
}
inline void OrderResult::clear_items() {
  items_.Clear();
}
inline ::hipstershop::OrderItem* OrderResult::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.OrderResult.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::OrderItem >*
OrderResult::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.OrderResult.items)
  return &items_;
}
inline const ::hipstershop::OrderItem& OrderResult::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::hipstershop::OrderItem& OrderResult::items(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.OrderResult.items)
  return _internal_items(index);
}
inline ::hipstershop::OrderItem* OrderResult::_internal_add_items() {
  return items_.Add();
}
inline ::hipstershop::OrderItem* OrderResult::add_items() {
  // @@protoc_insertion_point(field_add:hipstershop.OrderResult.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::OrderItem >&
OrderResult::items() const {
  // @@protoc_insertion_point(field_list:hipstershop.OrderResult.items)
  return items_;
}

// -------------------------------------------------------------------

// SendOrderConfirmationRequest

// string email = 1;
inline void SendOrderConfirmationRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SendOrderConfirmationRequest::email() const {
  // @@protoc_insertion_point(field_get:hipstershop.SendOrderConfirmationRequest.email)
  return _internal_email();
}
inline void SendOrderConfirmationRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:hipstershop.SendOrderConfirmationRequest.email)
}
inline std::string* SendOrderConfirmationRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:hipstershop.SendOrderConfirmationRequest.email)
  return _internal_mutable_email();
}
inline const std::string& SendOrderConfirmationRequest::_internal_email() const {
  return email_.Get();
}
inline void SendOrderConfirmationRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SendOrderConfirmationRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.SendOrderConfirmationRequest.email)
}
inline void SendOrderConfirmationRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.SendOrderConfirmationRequest.email)
}
inline void SendOrderConfirmationRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.SendOrderConfirmationRequest.email)
}
inline std::string* SendOrderConfirmationRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SendOrderConfirmationRequest::release_email() {
  // @@protoc_insertion_point(field_release:hipstershop.SendOrderConfirmationRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendOrderConfirmationRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.SendOrderConfirmationRequest.email)
}

// .hipstershop.OrderResult order = 2;
inline bool SendOrderConfirmationRequest::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool SendOrderConfirmationRequest::has_order() const {
  return _internal_has_order();
}
inline void SendOrderConfirmationRequest::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::hipstershop::OrderResult& SendOrderConfirmationRequest::_internal_order() const {
  const ::hipstershop::OrderResult* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::OrderResult&>(
      ::hipstershop::_OrderResult_default_instance_);
}
inline const ::hipstershop::OrderResult& SendOrderConfirmationRequest::order() const {
  // @@protoc_insertion_point(field_get:hipstershop.SendOrderConfirmationRequest.order)
  return _internal_order();
}
inline void SendOrderConfirmationRequest::unsafe_arena_set_allocated_order(
    ::hipstershop::OrderResult* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.SendOrderConfirmationRequest.order)
}
inline ::hipstershop::OrderResult* SendOrderConfirmationRequest::release_order() {
  
  ::hipstershop::OrderResult* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::OrderResult* SendOrderConfirmationRequest::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:hipstershop.SendOrderConfirmationRequest.order)
  
  ::hipstershop::OrderResult* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::hipstershop::OrderResult* SendOrderConfirmationRequest::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::OrderResult>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::hipstershop::OrderResult* SendOrderConfirmationRequest::mutable_order() {
  // @@protoc_insertion_point(field_mutable:hipstershop.SendOrderConfirmationRequest.order)
  return _internal_mutable_order();
}
inline void SendOrderConfirmationRequest::set_allocated_order(::hipstershop::OrderResult* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.SendOrderConfirmationRequest.order)
}

// -------------------------------------------------------------------

// PlaceOrderRequest

// string user_id = 1;
inline void PlaceOrderRequest::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlaceOrderRequest::user_id() const {
  // @@protoc_insertion_point(field_get:hipstershop.PlaceOrderRequest.user_id)
  return _internal_user_id();
}
inline void PlaceOrderRequest::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:hipstershop.PlaceOrderRequest.user_id)
}
inline std::string* PlaceOrderRequest::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:hipstershop.PlaceOrderRequest.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& PlaceOrderRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void PlaceOrderRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlaceOrderRequest::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.PlaceOrderRequest.user_id)
}
inline void PlaceOrderRequest::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.PlaceOrderRequest.user_id)
}
inline void PlaceOrderRequest::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.PlaceOrderRequest.user_id)
}
inline std::string* PlaceOrderRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlaceOrderRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:hipstershop.PlaceOrderRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaceOrderRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.PlaceOrderRequest.user_id)
}

// string user_currency = 2;
inline void PlaceOrderRequest::clear_user_currency() {
  user_currency_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlaceOrderRequest::user_currency() const {
  // @@protoc_insertion_point(field_get:hipstershop.PlaceOrderRequest.user_currency)
  return _internal_user_currency();
}
inline void PlaceOrderRequest::set_user_currency(const std::string& value) {
  _internal_set_user_currency(value);
  // @@protoc_insertion_point(field_set:hipstershop.PlaceOrderRequest.user_currency)
}
inline std::string* PlaceOrderRequest::mutable_user_currency() {
  // @@protoc_insertion_point(field_mutable:hipstershop.PlaceOrderRequest.user_currency)
  return _internal_mutable_user_currency();
}
inline const std::string& PlaceOrderRequest::_internal_user_currency() const {
  return user_currency_.Get();
}
inline void PlaceOrderRequest::_internal_set_user_currency(const std::string& value) {
  
  user_currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlaceOrderRequest::set_user_currency(std::string&& value) {
  
  user_currency_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.PlaceOrderRequest.user_currency)
}
inline void PlaceOrderRequest::set_user_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.PlaceOrderRequest.user_currency)
}
inline void PlaceOrderRequest::set_user_currency(const char* value,
    size_t size) {
  
  user_currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.PlaceOrderRequest.user_currency)
}
inline std::string* PlaceOrderRequest::_internal_mutable_user_currency() {
  
  return user_currency_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlaceOrderRequest::release_user_currency() {
  // @@protoc_insertion_point(field_release:hipstershop.PlaceOrderRequest.user_currency)
  return user_currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaceOrderRequest::set_allocated_user_currency(std::string* user_currency) {
  if (user_currency != nullptr) {
    
  } else {
    
  }
  user_currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_currency,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.PlaceOrderRequest.user_currency)
}

// .hipstershop.Address address = 3;
inline bool PlaceOrderRequest::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool PlaceOrderRequest::has_address() const {
  return _internal_has_address();
}
inline void PlaceOrderRequest::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::hipstershop::Address& PlaceOrderRequest::_internal_address() const {
  const ::hipstershop::Address* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::Address&>(
      ::hipstershop::_Address_default_instance_);
}
inline const ::hipstershop::Address& PlaceOrderRequest::address() const {
  // @@protoc_insertion_point(field_get:hipstershop.PlaceOrderRequest.address)
  return _internal_address();
}
inline void PlaceOrderRequest::unsafe_arena_set_allocated_address(
    ::hipstershop::Address* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.PlaceOrderRequest.address)
}
inline ::hipstershop::Address* PlaceOrderRequest::release_address() {
  
  ::hipstershop::Address* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::Address* PlaceOrderRequest::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:hipstershop.PlaceOrderRequest.address)
  
  ::hipstershop::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::hipstershop::Address* PlaceOrderRequest::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::Address>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::hipstershop::Address* PlaceOrderRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:hipstershop.PlaceOrderRequest.address)
  return _internal_mutable_address();
}
inline void PlaceOrderRequest::set_allocated_address(::hipstershop::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.PlaceOrderRequest.address)
}

// string email = 5;
inline void PlaceOrderRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlaceOrderRequest::email() const {
  // @@protoc_insertion_point(field_get:hipstershop.PlaceOrderRequest.email)
  return _internal_email();
}
inline void PlaceOrderRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:hipstershop.PlaceOrderRequest.email)
}
inline std::string* PlaceOrderRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:hipstershop.PlaceOrderRequest.email)
  return _internal_mutable_email();
}
inline const std::string& PlaceOrderRequest::_internal_email() const {
  return email_.Get();
}
inline void PlaceOrderRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlaceOrderRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.PlaceOrderRequest.email)
}
inline void PlaceOrderRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.PlaceOrderRequest.email)
}
inline void PlaceOrderRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.PlaceOrderRequest.email)
}
inline std::string* PlaceOrderRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlaceOrderRequest::release_email() {
  // @@protoc_insertion_point(field_release:hipstershop.PlaceOrderRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaceOrderRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.PlaceOrderRequest.email)
}

// .hipstershop.CreditCardInfo credit_card = 6;
inline bool PlaceOrderRequest::_internal_has_credit_card() const {
  return this != internal_default_instance() && credit_card_ != nullptr;
}
inline bool PlaceOrderRequest::has_credit_card() const {
  return _internal_has_credit_card();
}
inline void PlaceOrderRequest::clear_credit_card() {
  if (GetArena() == nullptr && credit_card_ != nullptr) {
    delete credit_card_;
  }
  credit_card_ = nullptr;
}
inline const ::hipstershop::CreditCardInfo& PlaceOrderRequest::_internal_credit_card() const {
  const ::hipstershop::CreditCardInfo* p = credit_card_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::CreditCardInfo&>(
      ::hipstershop::_CreditCardInfo_default_instance_);
}
inline const ::hipstershop::CreditCardInfo& PlaceOrderRequest::credit_card() const {
  // @@protoc_insertion_point(field_get:hipstershop.PlaceOrderRequest.credit_card)
  return _internal_credit_card();
}
inline void PlaceOrderRequest::unsafe_arena_set_allocated_credit_card(
    ::hipstershop::CreditCardInfo* credit_card) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_card_);
  }
  credit_card_ = credit_card;
  if (credit_card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.PlaceOrderRequest.credit_card)
}
inline ::hipstershop::CreditCardInfo* PlaceOrderRequest::release_credit_card() {
  
  ::hipstershop::CreditCardInfo* temp = credit_card_;
  credit_card_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::CreditCardInfo* PlaceOrderRequest::unsafe_arena_release_credit_card() {
  // @@protoc_insertion_point(field_release:hipstershop.PlaceOrderRequest.credit_card)
  
  ::hipstershop::CreditCardInfo* temp = credit_card_;
  credit_card_ = nullptr;
  return temp;
}
inline ::hipstershop::CreditCardInfo* PlaceOrderRequest::_internal_mutable_credit_card() {
  
  if (credit_card_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::CreditCardInfo>(GetArena());
    credit_card_ = p;
  }
  return credit_card_;
}
inline ::hipstershop::CreditCardInfo* PlaceOrderRequest::mutable_credit_card() {
  // @@protoc_insertion_point(field_mutable:hipstershop.PlaceOrderRequest.credit_card)
  return _internal_mutable_credit_card();
}
inline void PlaceOrderRequest::set_allocated_credit_card(::hipstershop::CreditCardInfo* credit_card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete credit_card_;
  }
  if (credit_card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(credit_card);
    if (message_arena != submessage_arena) {
      credit_card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_card, submessage_arena);
    }
    
  } else {
    
  }
  credit_card_ = credit_card;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.PlaceOrderRequest.credit_card)
}

// -------------------------------------------------------------------

// PlaceOrderResponse

// .hipstershop.OrderResult order = 1;
inline bool PlaceOrderResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool PlaceOrderResponse::has_order() const {
  return _internal_has_order();
}
inline void PlaceOrderResponse::clear_order() {
  if (GetArena() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
inline const ::hipstershop::OrderResult& PlaceOrderResponse::_internal_order() const {
  const ::hipstershop::OrderResult* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::hipstershop::OrderResult&>(
      ::hipstershop::_OrderResult_default_instance_);
}
inline const ::hipstershop::OrderResult& PlaceOrderResponse::order() const {
  // @@protoc_insertion_point(field_get:hipstershop.PlaceOrderResponse.order)
  return _internal_order();
}
inline void PlaceOrderResponse::unsafe_arena_set_allocated_order(
    ::hipstershop::OrderResult* order) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hipstershop.PlaceOrderResponse.order)
}
inline ::hipstershop::OrderResult* PlaceOrderResponse::release_order() {
  
  ::hipstershop::OrderResult* temp = order_;
  order_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hipstershop::OrderResult* PlaceOrderResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:hipstershop.PlaceOrderResponse.order)
  
  ::hipstershop::OrderResult* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::hipstershop::OrderResult* PlaceOrderResponse::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::hipstershop::OrderResult>(GetArena());
    order_ = p;
  }
  return order_;
}
inline ::hipstershop::OrderResult* PlaceOrderResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:hipstershop.PlaceOrderResponse.order)
  return _internal_mutable_order();
}
inline void PlaceOrderResponse::set_allocated_order(::hipstershop::OrderResult* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:hipstershop.PlaceOrderResponse.order)
}

// -------------------------------------------------------------------

// AdRequest

// repeated string context_keys = 1;
inline int AdRequest::_internal_context_keys_size() const {
  return context_keys_.size();
}
inline int AdRequest::context_keys_size() const {
  return _internal_context_keys_size();
}
inline void AdRequest::clear_context_keys() {
  context_keys_.Clear();
}
inline std::string* AdRequest::add_context_keys() {
  // @@protoc_insertion_point(field_add_mutable:hipstershop.AdRequest.context_keys)
  return _internal_add_context_keys();
}
inline const std::string& AdRequest::_internal_context_keys(int index) const {
  return context_keys_.Get(index);
}
inline const std::string& AdRequest::context_keys(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.AdRequest.context_keys)
  return _internal_context_keys(index);
}
inline std::string* AdRequest::mutable_context_keys(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.AdRequest.context_keys)
  return context_keys_.Mutable(index);
}
inline void AdRequest::set_context_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hipstershop.AdRequest.context_keys)
  context_keys_.Mutable(index)->assign(value);
}
inline void AdRequest::set_context_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hipstershop.AdRequest.context_keys)
  context_keys_.Mutable(index)->assign(std::move(value));
}
inline void AdRequest::set_context_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  context_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hipstershop.AdRequest.context_keys)
}
inline void AdRequest::set_context_keys(int index, const char* value, size_t size) {
  context_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hipstershop.AdRequest.context_keys)
}
inline std::string* AdRequest::_internal_add_context_keys() {
  return context_keys_.Add();
}
inline void AdRequest::add_context_keys(const std::string& value) {
  context_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hipstershop.AdRequest.context_keys)
}
inline void AdRequest::add_context_keys(std::string&& value) {
  context_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hipstershop.AdRequest.context_keys)
}
inline void AdRequest::add_context_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  context_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hipstershop.AdRequest.context_keys)
}
inline void AdRequest::add_context_keys(const char* value, size_t size) {
  context_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hipstershop.AdRequest.context_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AdRequest::context_keys() const {
  // @@protoc_insertion_point(field_list:hipstershop.AdRequest.context_keys)
  return context_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AdRequest::mutable_context_keys() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.AdRequest.context_keys)
  return &context_keys_;
}

// -------------------------------------------------------------------

// AdResponse

// repeated .hipstershop.Ad ads = 1;
inline int AdResponse::_internal_ads_size() const {
  return ads_.size();
}
inline int AdResponse::ads_size() const {
  return _internal_ads_size();
}
inline void AdResponse::clear_ads() {
  ads_.Clear();
}
inline ::hipstershop::Ad* AdResponse::mutable_ads(int index) {
  // @@protoc_insertion_point(field_mutable:hipstershop.AdResponse.ads)
  return ads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Ad >*
AdResponse::mutable_ads() {
  // @@protoc_insertion_point(field_mutable_list:hipstershop.AdResponse.ads)
  return &ads_;
}
inline const ::hipstershop::Ad& AdResponse::_internal_ads(int index) const {
  return ads_.Get(index);
}
inline const ::hipstershop::Ad& AdResponse::ads(int index) const {
  // @@protoc_insertion_point(field_get:hipstershop.AdResponse.ads)
  return _internal_ads(index);
}
inline ::hipstershop::Ad* AdResponse::_internal_add_ads() {
  return ads_.Add();
}
inline ::hipstershop::Ad* AdResponse::add_ads() {
  // @@protoc_insertion_point(field_add:hipstershop.AdResponse.ads)
  return _internal_add_ads();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hipstershop::Ad >&
AdResponse::ads() const {
  // @@protoc_insertion_point(field_list:hipstershop.AdResponse.ads)
  return ads_;
}

// -------------------------------------------------------------------

// Ad

// string redirect_url = 1;
inline void Ad::clear_redirect_url() {
  redirect_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ad::redirect_url() const {
  // @@protoc_insertion_point(field_get:hipstershop.Ad.redirect_url)
  return _internal_redirect_url();
}
inline void Ad::set_redirect_url(const std::string& value) {
  _internal_set_redirect_url(value);
  // @@protoc_insertion_point(field_set:hipstershop.Ad.redirect_url)
}
inline std::string* Ad::mutable_redirect_url() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Ad.redirect_url)
  return _internal_mutable_redirect_url();
}
inline const std::string& Ad::_internal_redirect_url() const {
  return redirect_url_.Get();
}
inline void Ad::_internal_set_redirect_url(const std::string& value) {
  
  redirect_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ad::set_redirect_url(std::string&& value) {
  
  redirect_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Ad.redirect_url)
}
inline void Ad::set_redirect_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Ad.redirect_url)
}
inline void Ad::set_redirect_url(const char* value,
    size_t size) {
  
  redirect_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Ad.redirect_url)
}
inline std::string* Ad::_internal_mutable_redirect_url() {
  
  return redirect_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ad::release_redirect_url() {
  // @@protoc_insertion_point(field_release:hipstershop.Ad.redirect_url)
  return redirect_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ad::set_allocated_redirect_url(std::string* redirect_url) {
  if (redirect_url != nullptr) {
    
  } else {
    
  }
  redirect_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Ad.redirect_url)
}

// string text = 2;
inline void Ad::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ad::text() const {
  // @@protoc_insertion_point(field_get:hipstershop.Ad.text)
  return _internal_text();
}
inline void Ad::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:hipstershop.Ad.text)
}
inline std::string* Ad::mutable_text() {
  // @@protoc_insertion_point(field_mutable:hipstershop.Ad.text)
  return _internal_mutable_text();
}
inline const std::string& Ad::_internal_text() const {
  return text_.Get();
}
inline void Ad::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ad::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hipstershop.Ad.text)
}
inline void Ad::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hipstershop.Ad.text)
}
inline void Ad::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hipstershop.Ad.text)
}
inline std::string* Ad::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ad::release_text() {
  // @@protoc_insertion_point(field_release:hipstershop.Ad.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ad::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hipstershop.Ad.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hipstershop

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_demo_2eproto
