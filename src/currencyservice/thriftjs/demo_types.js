//
// Autogenerated by Thrift Compiler (0.16.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var CartItem = module.exports.CartItem = function(args) {
  this.product_id = null;
  this.quantity = null;
  if (args) {
    if (args.product_id !== undefined && args.product_id !== null) {
      this.product_id = args.product_id;
    }
    if (args.quantity !== undefined && args.quantity !== null) {
      this.quantity = args.quantity;
    }
  }
};
CartItem.prototype = {};
CartItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.product_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.quantity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CartItem.prototype.write = function(output) {
  output.writeStructBegin('CartItem');
  if (this.product_id !== null && this.product_id !== undefined) {
    output.writeFieldBegin('product_id', Thrift.Type.STRING, 1);
    output.writeString(this.product_id);
    output.writeFieldEnd();
  }
  if (this.quantity !== null && this.quantity !== undefined) {
    output.writeFieldBegin('quantity', Thrift.Type.I32, 2);
    output.writeI32(this.quantity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Cart = module.exports.Cart = function(args) {
  this.user_id = null;
  this.items = null;
  if (args) {
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.items !== undefined && args.items !== null) {
      this.items = Thrift.copyList(args.items, [ttypes.CartItem]);
    }
  }
};
Cart.prototype = {};
Cart.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.items = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.CartItem();
          elem3.read(input);
          this.items.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cart.prototype.write = function(output) {
  output.writeStructBegin('Cart');
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.STRING, 1);
    output.writeString(this.user_id);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter4 in this.items) {
      if (this.items.hasOwnProperty(iter4)) {
        iter4 = this.items[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Product = module.exports.Product = function(args) {
  this.id = null;
  this.name = null;
  this.description = null;
  this.picture = null;
  this.price_usd = null;
  this.categories = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.picture !== undefined && args.picture !== null) {
      this.picture = args.picture;
    }
    if (args.price_usd !== undefined && args.price_usd !== null) {
      this.price_usd = new ttypes.Money(args.price_usd);
    }
    if (args.categories !== undefined && args.categories !== null) {
      this.categories = Thrift.copyList(args.categories, [null]);
    }
  }
};
Product.prototype = {};
Product.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.picture = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.price_usd = new ttypes.Money();
        this.price_usd.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.categories = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readString();
          this.categories.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Product.prototype.write = function(output) {
  output.writeStructBegin('Product');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.picture !== null && this.picture !== undefined) {
    output.writeFieldBegin('picture', Thrift.Type.STRING, 4);
    output.writeString(this.picture);
    output.writeFieldEnd();
  }
  if (this.price_usd !== null && this.price_usd !== undefined) {
    output.writeFieldBegin('price_usd', Thrift.Type.STRUCT, 5);
    this.price_usd.write(output);
    output.writeFieldEnd();
  }
  if (this.categories !== null && this.categories !== undefined) {
    output.writeFieldBegin('categories', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.categories.length);
    for (var iter9 in this.categories) {
      if (this.categories.hasOwnProperty(iter9)) {
        iter9 = this.categories[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Address = module.exports.Address = function(args) {
  this.street_address = null;
  this.city = null;
  this.state = null;
  this.country = null;
  this.zip_code = null;
  if (args) {
    if (args.street_address !== undefined && args.street_address !== null) {
      this.street_address = args.street_address;
    }
    if (args.city !== undefined && args.city !== null) {
      this.city = args.city;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.zip_code !== undefined && args.zip_code !== null) {
      this.zip_code = args.zip_code;
    }
  }
};
Address.prototype = {};
Address.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.street_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.zip_code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Address.prototype.write = function(output) {
  output.writeStructBegin('Address');
  if (this.street_address !== null && this.street_address !== undefined) {
    output.writeFieldBegin('street_address', Thrift.Type.STRING, 1);
    output.writeString(this.street_address);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 2);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 3);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 4);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.zip_code !== null && this.zip_code !== undefined) {
    output.writeFieldBegin('zip_code', Thrift.Type.I32, 5);
    output.writeI32(this.zip_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Money = module.exports.Money = function(args) {
  this.currency_code = null;
  this.units = null;
  this.nanos = null;
  if (args) {
    if (args.currency_code !== undefined && args.currency_code !== null) {
      this.currency_code = args.currency_code;
    }
    if (args.units !== undefined && args.units !== null) {
      this.units = args.units;
    }
    if (args.nanos !== undefined && args.nanos !== null) {
      this.nanos = args.nanos;
    }
  }
};
Money.prototype = {};
Money.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currency_code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.units = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.nanos = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Money.prototype.write = function(output) {
  output.writeStructBegin('Money');
  if (this.currency_code !== null && this.currency_code !== undefined) {
    output.writeFieldBegin('currency_code', Thrift.Type.STRING, 1);
    output.writeString(this.currency_code);
    output.writeFieldEnd();
  }
  if (this.units !== null && this.units !== undefined) {
    output.writeFieldBegin('units', Thrift.Type.I64, 2);
    output.writeI64(this.units);
    output.writeFieldEnd();
  }
  if (this.nanos !== null && this.nanos !== undefined) {
    output.writeFieldBegin('nanos', Thrift.Type.I32, 3);
    output.writeI32(this.nanos);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CreditCardInfo = module.exports.CreditCardInfo = function(args) {
  this.credit_card_number = null;
  this.credit_card_cvv = null;
  this.credit_card_expiration_year = null;
  this.credit_card_expiration_month = null;
  if (args) {
    if (args.credit_card_number !== undefined && args.credit_card_number !== null) {
      this.credit_card_number = args.credit_card_number;
    }
    if (args.credit_card_cvv !== undefined && args.credit_card_cvv !== null) {
      this.credit_card_cvv = args.credit_card_cvv;
    }
    if (args.credit_card_expiration_year !== undefined && args.credit_card_expiration_year !== null) {
      this.credit_card_expiration_year = args.credit_card_expiration_year;
    }
    if (args.credit_card_expiration_month !== undefined && args.credit_card_expiration_month !== null) {
      this.credit_card_expiration_month = args.credit_card_expiration_month;
    }
  }
};
CreditCardInfo.prototype = {};
CreditCardInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.credit_card_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.credit_card_cvv = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.credit_card_expiration_year = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.credit_card_expiration_month = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CreditCardInfo.prototype.write = function(output) {
  output.writeStructBegin('CreditCardInfo');
  if (this.credit_card_number !== null && this.credit_card_number !== undefined) {
    output.writeFieldBegin('credit_card_number', Thrift.Type.STRING, 1);
    output.writeString(this.credit_card_number);
    output.writeFieldEnd();
  }
  if (this.credit_card_cvv !== null && this.credit_card_cvv !== undefined) {
    output.writeFieldBegin('credit_card_cvv', Thrift.Type.I32, 2);
    output.writeI32(this.credit_card_cvv);
    output.writeFieldEnd();
  }
  if (this.credit_card_expiration_year !== null && this.credit_card_expiration_year !== undefined) {
    output.writeFieldBegin('credit_card_expiration_year', Thrift.Type.I32, 3);
    output.writeI32(this.credit_card_expiration_year);
    output.writeFieldEnd();
  }
  if (this.credit_card_expiration_month !== null && this.credit_card_expiration_month !== undefined) {
    output.writeFieldBegin('credit_card_expiration_month', Thrift.Type.I32, 4);
    output.writeI32(this.credit_card_expiration_month);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OrderItem = module.exports.OrderItem = function(args) {
  this.item = null;
  this.cost = null;
  if (args) {
    if (args.item !== undefined && args.item !== null) {
      this.item = new ttypes.CartItem(args.item);
    }
    if (args.cost !== undefined && args.cost !== null) {
      this.cost = new ttypes.Money(args.cost);
    }
  }
};
OrderItem.prototype = {};
OrderItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.item = new ttypes.CartItem();
        this.item.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cost = new ttypes.Money();
        this.cost.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderItem.prototype.write = function(output) {
  output.writeStructBegin('OrderItem');
  if (this.item !== null && this.item !== undefined) {
    output.writeFieldBegin('item', Thrift.Type.STRUCT, 1);
    this.item.write(output);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.STRUCT, 2);
    this.cost.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OrderResult = module.exports.OrderResult = function(args) {
  this.order_id = null;
  this.shipping_tracking_id = null;
  this.shipping_cost = null;
  this.shipping_address = null;
  this.items = null;
  if (args) {
    if (args.order_id !== undefined && args.order_id !== null) {
      this.order_id = args.order_id;
    }
    if (args.shipping_tracking_id !== undefined && args.shipping_tracking_id !== null) {
      this.shipping_tracking_id = args.shipping_tracking_id;
    }
    if (args.shipping_cost !== undefined && args.shipping_cost !== null) {
      this.shipping_cost = new ttypes.Money(args.shipping_cost);
    }
    if (args.shipping_address !== undefined && args.shipping_address !== null) {
      this.shipping_address = new ttypes.Address(args.shipping_address);
    }
    if (args.items !== undefined && args.items !== null) {
      this.items = Thrift.copyList(args.items, [ttypes.OrderItem]);
    }
  }
};
OrderResult.prototype = {};
OrderResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.order_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shipping_tracking_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.shipping_cost = new ttypes.Money();
        this.shipping_cost.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.shipping_address = new ttypes.Address();
        this.shipping_address.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        this.items = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.OrderItem();
          elem13.read(input);
          this.items.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OrderResult.prototype.write = function(output) {
  output.writeStructBegin('OrderResult');
  if (this.order_id !== null && this.order_id !== undefined) {
    output.writeFieldBegin('order_id', Thrift.Type.STRING, 1);
    output.writeString(this.order_id);
    output.writeFieldEnd();
  }
  if (this.shipping_tracking_id !== null && this.shipping_tracking_id !== undefined) {
    output.writeFieldBegin('shipping_tracking_id', Thrift.Type.STRING, 2);
    output.writeString(this.shipping_tracking_id);
    output.writeFieldEnd();
  }
  if (this.shipping_cost !== null && this.shipping_cost !== undefined) {
    output.writeFieldBegin('shipping_cost', Thrift.Type.STRUCT, 3);
    this.shipping_cost.write(output);
    output.writeFieldEnd();
  }
  if (this.shipping_address !== null && this.shipping_address !== undefined) {
    output.writeFieldBegin('shipping_address', Thrift.Type.STRUCT, 4);
    this.shipping_address.write(output);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter14 in this.items) {
      if (this.items.hasOwnProperty(iter14)) {
        iter14 = this.items[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Ad = module.exports.Ad = function(args) {
  this.redirect_url = null;
  this.text = null;
  if (args) {
    if (args.redirect_url !== undefined && args.redirect_url !== null) {
      this.redirect_url = args.redirect_url;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
  }
};
Ad.prototype = {};
Ad.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.redirect_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Ad.prototype.write = function(output) {
  output.writeStructBegin('Ad');
  if (this.redirect_url !== null && this.redirect_url !== undefined) {
    output.writeFieldBegin('redirect_url', Thrift.Type.STRING, 1);
    output.writeString(this.redirect_url);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

